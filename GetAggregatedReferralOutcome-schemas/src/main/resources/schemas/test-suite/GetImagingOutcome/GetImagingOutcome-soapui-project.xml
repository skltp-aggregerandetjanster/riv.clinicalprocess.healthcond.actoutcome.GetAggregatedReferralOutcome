<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="GetImagingOutcome" resourceRoot="${projectDir}" soapui-version="5.0.0-beta" id="f44da86e-b42f-4ef5-b74b-b7765d01e975" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="GetImagingOutcomeResponderBinding" type="wsdl" bindingName="{urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcome:1:rivtabp21}GetImagingOutcomeResponderBinding" soapVersion="1_1" anonymous="optional" definition="../../schemas/interactions/GetImagingOutcomeInteraction/GetImagingOutcomeInteraction_1.0_RIVTABP21.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/Users/khaleddaham/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/actoutcome/trunk/schemas/interactions/GetImagingOutcomeInteraction/GetImagingOutcomeInteraction_1.0_RIVTABP21.wsdl"><con:part><con:url>file:/Users/khaleddaham/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/actoutcome/trunk/schemas/interactions/GetImagingOutcomeInteraction/GetImagingOutcomeInteraction_1.0_RIVTABP21.wsdl</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<wsdl:definitions name="GetImagingOutcomeInteraction" targetNamespace="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcome:1:rivtabp21" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tjsr="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1" xmlns:tjsi="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeInitiator:1" xmlns:tns="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcome:1:rivtabp21" xmlns:itr="urn:riv:itintegration:registry:1">
  <xs:annotation>
    <xs:documentation>Tjänsteinteraktionens namn: GetImagingOutcomeInteraction
			 Beskrivning: 
			   Returnerar svar på en förfrågan om bild för en patient
			 Revisioner: 
			 Tjänstedomän: clinicalprocess:healthcond:actoutcome
			 Tjänsteinteraktionstyp: Fråga-Svar
			 WS-profil: RIVTABP21
			 Förvaltas av: Sveriges Kommuner och Landsting</xs:documentation>
  </xs:annotation>
  <wsdl:types>
    <xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcome:1:rivtabp21">
      <xs:import schemaLocation="GetImagingOutcomeResponder_1.0.xsd" namespace="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1"/>
      <xs:import schemaLocation="../../core_components/itintegration_registry_1.0.xsd" namespace="urn:riv:itintegration:registry:1"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="GetImagingOutcomeRequest">
    <wsdl:part name="LogicalAddress" element="itr:LogicalAddress">
      <wsdl:documentation>National: The HSA-id of Inera AB ("national" aggregation service)
			Regional: The HSA-id of Inera AB (regional aggregation service)
			Specific Source system: The HSA-id of the source system</wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="parameters" element="tjsr:GetImagingOutcome"/>
  </wsdl:message>
  <wsdl:message name="GetImagingOutcomeResponse">
    <wsdl:part name="parameters" element="tjsr:GetImagingOutcomeResponse"/>
  </wsdl:message>
  <wsdl:portType name="GetImagingOutcomeResponderInterface">
    <wsdl:operation name="GetImagingOutcome">
      <wsdl:input message="tns:GetImagingOutcomeRequest"/>
      <wsdl:output message="tns:GetImagingOutcomeResponse"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="GetImagingOutcomeResponderBinding" type="tns:GetImagingOutcomeResponderInterface">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetImagingOutcome">
      <soap:operation soapAction="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1:GetImagingOutcome" style="document"/>
      <wsdl:input>
        <soap:header use="literal" message="tns:GetImagingOutcomeRequest" part="LogicalAddress"/>
        <soap:body use="literal" parts="parameters"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="GetImagingOutcomeResponderService">
    <wsdl:port name="GetImagingOutcomeResponderPort" binding="tns:GetImagingOutcomeResponderBinding">
      <soap:address location="http://tempuri.org"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>file:/Users/khaleddaham/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/actoutcome/trunk/schemas/interactions/GetImagingOutcomeInteraction/GetImagingOutcomeResponder_1.0.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1" elementFormDefault="qualified" attributeFormDefault="unqualified" version="1.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1" xmlns:core="urn:riv:clinicalprocess:healthcond:actoutcome:3" xmlns:codes="urn:riv:clinicalprocess:healthcond:actoutcome:enums:3">
  <xs:import schemaLocation="../../core_components/clinicalprocess_healthcond_actoutcome_3.0.xsd" namespace="urn:riv:clinicalprocess:healthcond:actoutcome:3"/>
  <xs:import schemaLocation="../../core_components/clinicalprocess_healthcond_actoutcome_enum_3.0.xsd" namespace="urn:riv:clinicalprocess:healthcond:actoutcome:enums:3"/>
  <xs:element name="GetImagingOutcome" type="tns:GetImagingOutcomeType"/>
  <xs:element name="GetImagingOutcomeResponse" type="tns:GetImagingOutcomeResponseType"/>
  <xs:complexType name="GetImagingOutcomeType">
    <xs:sequence>
      <xs:element name="careUnitHSAId" type="core:HSAIdType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="patientId" type="core:PersonIdType"/>
      <xs:element name="datePeriod" type="core:DatePeriodType" minOccurs="0"/>
      <xs:element name="sourceSystemHSAId" type="core:HSAIdType" minOccurs="0"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="GetImagingOutcomeResponseType">
    <xs:sequence>
      <xs:element name="imagingOutcome" type="core:ImagingOutcomeType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="result" type="core:ResultType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/khaleddaham/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/actoutcome/trunk/schemas/core_components/clinicalprocess_healthcond_actoutcome_3.0.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:actoutcome:3" elementFormDefault="qualified" attributeFormDefault="unqualified" version="3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:actoutcome:3" xmlns:codes="urn:riv:clinicalprocess:healthcond:actoutcome:enums:3">
  <xs:import schemaLocation="./clinicalprocess_healthcond_actoutcome_enum_3.0.xsd" namespace="urn:riv:clinicalprocess:healthcond:actoutcome:enums:3"/>
  <!--Common datatypes-->
  <xs:complexType name="PatientSummaryHeaderType">
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element name="sourceSystemHSAId" type="tns:HSAIdType"/>
      <xs:element name="documentTitle" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="documentTime" type="tns:TimeStampType" maxOccurs="1" minOccurs="0"/>
      <xs:element name="patientId" type="tns:PersonIdType"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType"/>
      <xs:element name="legalAuthenticator" type="tns:LegalAuthenticatorType" minOccurs="0"/>
      <xs:element name="approvedForPatient" type="xs:boolean"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0"/>
      <xs:element name="nullified" type="xs:boolean" minOccurs="0"/>
      <xs:element name="nullifiedReason" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ActType">
    <xs:sequence>
      <xs:element name="actId" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="actCode" type="tns:ActCodeType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="actText" type="xs:string"/>
      <xs:element name="actTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="actResult" type="tns:MultimediaType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ObservationType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="1" maxOccurs="1"/>
      <xs:element name="type" type="tns:CVType" minOccurs="1" maxOccurs="1"/>
      <xs:element name="targetSite" type="tns:CVType" minOccurs="0"/>
      <xs:element name="time" type="tns:TimePeriodType" minOccurs="0"/>
      <xs:element name="method" type="tns:CVType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="value" type="tns:CVType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="valueNegation" type="xs:boolean" minOccurs="0" maxOccurs="1"/>
      <xs:element name="description" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="approvedForPatient" type="xs:boolean" minOccurs="0" maxOccurs="1"/>
      <xs:element name="location" type="tns:LocationType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="patient" type="tns:PatientType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="legalauthenticator" type="tns:LegalAuthenticatorType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="sourceSystem" type="tns:SourceSystemType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="relation" type="tns:RelationType" minOccurs="0" maxOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LocationType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="name" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="address" type="tns:AddressType"/>
      <xs:element name="telecom" type="tns:TelType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SourceSystemType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="0" maxOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AddressType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="name" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="address" type="tns:AddressType"/>
      <xs:element name="telecom" type="tns:TelType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TelType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="name" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="address" type="tns:AddressType"/>
      <xs:element name="telecom" type="tns:TelType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RelationType">
    <xs:sequence>
      <xs:element name="code" type="tns:CVType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="referredInformation" type="tns:ReferredInformationType" minOccurs="1" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PatientType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="1" maxOccurs="1"/>
      <xs:element name="dateOfBirth" type="tns:DateType" minOccurs="1" maxOccurs="1"/>
      <xs:element name="gender" type="tns:CVType" minOccurs="0"/>
      <xs:element name="actTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="actResult" type="tns:MultimediaType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ReferredInformationType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="1" maxOccurs="1"/>
      <xs:element name="time" type="tns:ActCodeType" minOccurs="1" maxOccurs="1"/>
      <xs:element name="urn" type="xs:string"/>
      <xs:element name="informationOwner" type="tns:InformationOwnerType" minOccurs="1"/>
      <xs:element name="performerRole" type="tns:PerformerRoleType" minOccurs="1" maxOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="InformationOwnerType">
    <xs:sequence>
      <xs:element name="actId" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="actCode" type="tns:ActCodeType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="actText" type="xs:string"/>
      <xs:element name="actTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="actResult" type="tns:MultimediaType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PerformerRoleType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="code" type="tns:CVType" minOccurs="1" maxOccurs="1"/>
      <xs:element name="person" type="tns:PersonType"/>
      <xs:element name="careUnit" type="tns:CareUnitType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PersonType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="name" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CareUnitType">
    <xs:sequence>
      <xs:element name="actId" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="actCode" type="tns:ActCodeType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="actText" type="xs:string"/>
      <xs:element name="actTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="actResult" type="tns:MultimediaType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CareGiverType">
    <xs:sequence>
      <xs:element name="actId" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="actCode" type="tns:ActCodeType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="actText" type="xs:string"/>
      <xs:element name="actTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="actResult" type="tns:MultimediaType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ActCodeType">
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="codeSystem" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ReferralType">
    <xs:sequence>
      <xs:element name="referralId" type="xs:string"/>
      <xs:element name="referralReason" type="xs:string" minOccurs="1"/>
      <xs:element name="referralTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="referralAuthor" type="tns:HealthcareProfessionalType"/>
      <xs:element minOccurs="0" name="careContactId" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ECGReferralType">
    <xs:sequence>
      <xs:element name="referralId" type="xs:string"/>
      <xs:element name="referralReason" type="xs:string" minOccurs="0"/>
      <xs:element name="anamnesis" type="xs:string" minOccurs="0"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType"/>
      <xs:element name="attested" type="tns:LegalAuthenticatorType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OrderType">
    <xs:sequence>
      <xs:element name="orderId" type="xs:string"/>
      <xs:element name="orderReason" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AuthorType">
    <xs:sequence>
      <xs:element name="authorTime" type="tns:TimeStampType"/>
      <xs:element name="authorHSAId" type="tns:HSAIdType"/>
      <xs:element name="authorRoleCode" type="xs:string" minOccurs="0"/>
      <xs:element name="authorOtherRole" minOccurs="0" type="tns:AuthorOtherRoleType"/>
      <xs:element name="authorName" type="xs:string" minOccurs="0"/>
      <xs:element name="authorOrgUnitHSAid" type="tns:HSAIdType"/>
      <xs:element name="authorOrgUnitName" type="xs:string"/>
      <xs:element name="authorOrgUnitAddress" type="xs:string" minOccurs="0"/>
      <xs:element name="careUnitHSAid" type="tns:HSAIdType"/>
      <xs:element name="careGiverHSAid" type="tns:HSAIdType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AuthorOtherRoleType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="authorOtherRoleCode" type="xs:string"/>
      <xs:element name="authorOtherRoleCodeOID" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LegalAuthenticatorType">
    <xs:annotation>
      <xs:documentation>Information om signering
                
                signatureTime: 
                    Tidpunkt för signering, format ÅÅÅÅMMDDttmmss. 
                assignedEntity: 
                    Information om person som signerat dokumentet</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="signatureTime" type="tns:TimeStampType"/>
      <xs:element name="legalAuthenticatorHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element minOccurs="0" name="legalAuthenticatorName" type="xs:string"/>
      <xs:element minOccurs="0" name="legalAuthenticatorRoleCode" type="tns:CVType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriodType">
    <xs:annotation>
      <xs:documentation>Används för att specificera ett datumintervall
                med hjälp av start- och slutdatum.
                
                start: 
                    Startdatum på formatet ÅÅÅÅMMDD
                end: 
                    Slutdatum på formatet ÅÅÅÅMMDD</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="start" type="tns:DateType" minOccurs="0"/>
      <xs:element name="end" type="tns:DateType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--YYYYMMDD-->
  <xs:simpleType name="DateType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="(19|20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])"/>
    </xs:restriction>
  </xs:simpleType>
  <!--@TODO Should we have maxlength 64?-->
  <xs:simpleType name="HSAIdType">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:complexType name="MultimediaType">
    <xs:sequence>
      <xs:element name="id" type="xs:string" minOccurs="0"/>
      <xs:element name="mediaType" type="codes:MediaTypeEnum"/>
      <xs:element name="value" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="reference" type="xs:anyURI" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PersonIdType">
    <xs:sequence>
      <xs:element name="id" type="xs:string"/>
      <xs:element name="type" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PQType">
    <xs:sequence>
      <xs:element name="value" type="xs:double"/>
      <xs:element name="unit" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TimePeriodType">
    <xs:annotation>
      <xs:documentation>Används för att specificera ett datumintervall
                med hjälp av start- och slutdatum.
                
                start: 
                Startdatum på formatet YYYYMMDDhhmmss
                end: 
                Slutdatum på formatet YYYYMMDDhhmmss</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="start" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="end" type="tns:TimeStampType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="TimeStampType">
    <xs:annotation>
      <xs:documentation>A quantity specifying a point on the axis of natural time.
                A point in time is most often represented as a calendar
                expression.
                
                The time has the format YYYYMMDDhhmmss</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="(19|20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|1[0-9]|2[0123])([0-5])([0-9])([0-5])([0-9])"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="MeasurementType">
    <xs:sequence>
      <xs:element name="code" type="tns:CVType"/>
      <xs:element name="value" type="tns:PQType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResultType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="resultCode" type="codes:ResultCodeEnum"/>
      <xs:element name="errorCode" type="codes:ErrorCodeEnum" minOccurs="0"/>
      <xs:element name="logId" type="xs:string"/>
      <xs:element minOccurs="0" name="subCode" type="xs:string"/>
      <xs:element name="message" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="HealthcareProfessionalType">
    <xs:annotation>
      <xs:documentation>Information om hälso- och omsorgspesonal
                
                healthcareProfessionalHsaId: 
                HSA-id för vård- och omsorgspersonal 
                healthcareProfessionalName
                Namn på vård- och omsorgspersonal
                healthcareProfessionalRoleCode: 
                Information om personens befattning. Om möjligt skall KV Befattning (OID 1.2.752.129.2.2.1.4), se 
                http://www.inera.se/Documents/TJANSTER_PROJEKT/Katalogtjanst_HSA/Innehall/hsa_innehall_befattning.pdf 
                healthcareProfessionalCareUnitHSAid: 
                HSA-id för PDL-enhet som vård- och omsorgspersonen är uppdragstagare för
                healthcareProfessionalCareGiverHSAid: 
                HSA-id för vårdgivaren, som är vårdgivare för den enhet som författaren är uppdragstagare för</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="authorTime" type="tns:TimeStampType"/>
      <xs:element name="healthcareProfessionalHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalName" type="xs:string" minOccurs="0"/>
      <xs:element name="healthcareProfessionalRoleCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalOrgUnit" type="tns:OrgUnitType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalCareUnitHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element minOccurs="0" name="healthcareProfessionalCareGiverHSAId" type="tns:HSAIdType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OrgUnitType">
    <xs:annotation>
      <xs:documentation>Information om en organisationsenhet
                
                orgUnitHsaId: 
                HSA-id för organisationsenhet
                orgUnitName
                Namn på organisationsenhet
                orgUnitTelecom: 
                Telefon till organisationsenhet
                orgUnitEmail: 
                Epost till enhet
                orgUnitAddress: 
                Postadress till enhet
                orgUnitLocation: 
                Text som anger namnet på plats eller ort för enhetens eller funktionens fysiska placering</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="orgUnitHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="orgUnitName" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitTelecom" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitEmail" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitAddress" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitLocation" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CVType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystem" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystemName" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystemVersion" type="xs:string" minOccurs="0"/>
      <xs:element name="displayName" type="xs:string" minOccurs="0"/>
      <xs:element name="originalText" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="IIType">
    <xs:sequence>
      <xs:element name="root" type="xs:string"/>
      <xs:element name="extension" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ActorType">
    <xs:sequence>
      <xs:element name="hsaId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="personTelecom" type="xs:string" minOccurs="0"/>
      <xs:element name="personEmail" type="xs:string" minOccurs="0"/>
      <xs:element name="personAddress" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AnalysisType">
    <xs:sequence>
      <xs:element name="analysisId" type="tns:IIType" minOccurs="1"/>
      <xs:element name="analysisTime" type="tns:TimePeriodType" minOccurs="0"/>
      <xs:element name="analysisCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="analysisText" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="analysisStatus" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="analysisComment" type="xs:string" minOccurs="0"/>
      <xs:element name="specimen" type="xs:string" minOccurs="0"/>
      <xs:element name="method" type="xs:string" minOccurs="0"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="relationToAnalysis" type="tns:RelationToAnalysisType"/>
      <xs:element name="analysisOutcome" type="tns:AnalysisOutcomeType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RelationToAnalysisType">
    <xs:sequence>
      <xs:element name="analysisId" type="tns:IIType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AnalysisOutcomeType">
    <xs:sequence>
      <xs:element name="outcomeValue" type="xs:string"/>
      <xs:element name="outcomeUnit" type="xs:string" minOccurs="0"/>
      <xs:element name="observationTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="pathologicalFlag" type="xs:boolean"/>
      <xs:element name="outcomeDescription" type="xs:string" minOccurs="0"/>
      <xs:element name="referenceInterval" type="xs:string" minOccurs="0"/>
      <xs:element name="referencePopulation" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ECGOutcomeType">
    <xs:sequence>
      <xs:element name="ecgOutcomeHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="ecgOutcomeBody" type="tns:ECGOutcomeBodyType" minOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ImagingOutcomeType">
    <xs:sequence>
      <xs:element name="imagingOutcomeHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="imagingOutcomeBody" type="tns:ImagingBodyType" minOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ImagingBodyType">
    <xs:sequence>
      <xs:element minOccurs="0" name="examinationSpeciality" type="tns:CVType"/>
      <xs:element name="typeOfResult" type="codes:TypeOfResultCodeEnum"/>
      <xs:element name="resultTime" type="tns:TimeStampType" minOccurs="1"/>
      <xs:element name="resultReport" type="xs:string" minOccurs="1"/>
      <xs:element minOccurs="0" name="resultComment" type="xs:string"/>
      <xs:element maxOccurs="unbounded" name="radiationDose" type="tns:PQType" minOccurs="0"/>
      <xs:element name="patientData" type="tns:PatientDataType" minOccurs="0"/>
      <xs:element name="imageRecording" type="tns:ImageRecordingType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element minOccurs="0" name="referral" type="tns:ECGReferralType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ImageStructuredDataType">
    <xs:sequence>
      <xs:element name="aperture" type="tns:PQType" minOccurs="0"/>
      <xs:element name="exposureTime" type="tns:PQType" minOccurs="0"/>
      <xs:element name="imageCreationTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="bodyPartExamined" type="tns:CVType" minOccurs="0"/>
      <xs:element name="contrastAgentUsed" type="xs:string" minOccurs="0"/>
      <xs:element name="magneticFieldStrength" type="tns:PQType" minOccurs="0"/>
      <xs:element name="copyright" type="xs:string" minOccurs="0"/>
      <xs:element name="imageData" type="tns:ImageDataType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ECGOutcomeBodyType">
    <xs:sequence>
      <xs:element minOccurs="0" name="examinationSpeciality" type="tns:CVType"/>
      <xs:element name="typeOfResult" type="codes:TypeOfResultCodeEnum"/>
      <xs:element name="resultTime" type="tns:TimeStampType" minOccurs="1"/>
      <xs:element name="resultReport" type="xs:string" minOccurs="1"/>
      <xs:element minOccurs="0" name="resultComment" type="xs:string"/>
      <xs:element name="patientData" type="tns:PatientDataType" minOccurs="0"/>
      <xs:element name="ecgRecording" type="tns:ECGRecordingType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element minOccurs="0" name="referral" type="tns:ECGReferralType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ImageDataType">
    <xs:sequence>
      <xs:element name="mediaType" type="codes:MediaTypeEnum" minOccurs="1"/>
      <xs:element name="value" type="xs:base64Binary" minOccurs="0"/>
      <xs:element minOccurs="0" name="reference" type="xs:anyURI"/>
      <xs:element minOccurs="0" name="burnedInaAnnotations" type="xs:boolean"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PatientDataType">
    <xs:sequence>
      <xs:element name="patientWeight" type="tns:PQType" minOccurs="0"/>
      <xs:element name="patientLength" type="tns:PQType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ModalityDataType">
    <xs:sequence>
      <xs:element minOccurs="0" name="typeOfModality" type="xs:string"/>
      <xs:element name="manufacturer" type="xs:string" minOccurs="0"/>
      <xs:element name="modelName" type="xs:string" minOccurs="0"/>
      <xs:element name="equipmentId" type="xs:string" minOccurs="0"/>
      <xs:element minOccurs="0" name="softwareVersion" type="xs:string"/>
      <xs:element name="lineFilter" type="tns:PQType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ImageRecordingType">
    <xs:sequence>
      <xs:element name="recordingId" type="tns:IIType"/>
      <xs:element name="examinationActivity" type="tns:CVType" minOccurs="1"/>
      <xs:element name="examinationTimePeriod" type="tns:TimePeriodType" minOccurs="1"/>
      <xs:element name="examinationStatus" type="codes:ExaminationStatusCodeEnum" minOccurs="0"/>
      <xs:element name="examinationUnit" type="xs:string" minOccurs="0"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType" minOccurs="0"/>
      <xs:element minOccurs="0" name="numberOfImages" type="xs:int"/>
      <xs:element minOccurs="0" name="modalityData" type="tns:ModalityDataType"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="imageDicomData" type="tns:DicomDataType"/>
      <xs:element name="imageStructuredData" type="tns:ImageStructuredDataType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ECGRecordingType">
    <xs:sequence>
      <xs:element name="recordingId" type="tns:IIType"/>
      <xs:element name="examinationActivity" type="tns:CVType" minOccurs="1"/>
      <xs:element name="examinationTimePeriod" type="tns:TimePeriodType" minOccurs="1"/>
      <xs:element name="examinationStatus" type="tns:CVType" minOccurs="0"/>
      <xs:element name="examinationUnit" type="xs:string" minOccurs="0"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType" minOccurs="0"/>
      <xs:element minOccurs="0" name="modalityData" type="tns:ModalityDataType"/>
      <xs:element minOccurs="0" name="pacemaker" type="xs:boolean"/>
      <xs:element name="ecgStructuredData" type="tns:ECGStructuredDataType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="ecgDicomData" type="tns:DicomDataType"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="ecgData" type="tns:ImageDataType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ECGStructuredDataType">
    <xs:sequence>
      <xs:element name="usedFilter" type="tns:UsedFilterType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="heartRate" type="tns:PQType" minOccurs="0"/>
      <xs:element name="qt" type="tns:PQType" minOccurs="0"/>
      <xs:element name="qtCorrected" type="tns:PQType" minOccurs="0"/>
      <xs:element name="pr" type="tns:PQType" minOccurs="0"/>
      <xs:element name="pAxis" type="tns:PQType" minOccurs="0"/>
      <xs:element name="qrsAxis" type="tns:PQType" minOccurs="0"/>
      <xs:element name="tAxis" type="tns:PQType" minOccurs="0"/>
      <xs:element name="st" type="tns:STType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="interpretationAlgorithmName" type="xs:string" minOccurs="0"/>
      <xs:element name="interpretation" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DicomDataType">
    <xs:sequence>
      <xs:element name="dicomSOP" type="xs:string"/>
      <xs:element name="dicomValue" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="dicomReference" type="xs:anyURI" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ECGStaticDataType">
    <xs:sequence>
      <xs:element name="mediaType" type="codes:MediaTypeEnum"/>
      <xs:element name="value" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="reference" type="xs:anyURI" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="STType">
    <xs:sequence>
      <xs:element name="leadName" type="xs:string"/>
      <xs:element name="stLevel" type="tns:PQType" minOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="UsedFilterType">
    <xs:sequence>
      <xs:element name="filterName" type="xs:string" minOccurs="0"/>
      <xs:element name="lowerFrequency" type="tns:PQType" minOccurs="0"/>
      <xs:element name="upperFrequency" type="tns:PQType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PostDeliveryRecordType">
    <xs:sequence>
      <xs:element name="motherPostDeliveryRecord" type="tns:MotherPostDeliveryRecordType"/>
      <xs:element name="childPostDeliveryRecord" type="tns:ChildPostDeliveryRecordType" minOccurs="1" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MotherPostDeliveryRecordType">
    <xs:sequence>
      <xs:element name="bloodPressureSystolic" type="tns:PQType" minOccurs="0"/>
      <xs:element name="bloodPressureDiastolic" type="tns:PQType" minOccurs="0"/>
      <xs:element name="haemoglobin" type="tns:PQType" minOccurs="0"/>
      <xs:element name="bodyTemperature" type="xs:decimal" minOccurs="0"/>
      <xs:element name="scarsOK" type="xs:boolean" minOccurs="0"/>
      <xs:element name="sutureRemoved" type="xs:boolean" minOccurs="0"/>
      <xs:element name="perineumComfortable" type="xs:boolean" minOccurs="0"/>
      <xs:element name="vulvaVaginaPortioOK" type="xs:boolean" minOccurs="0"/>
      <xs:element name="uterusContracted" type="xs:boolean" minOccurs="0"/>
      <xs:element name="uterusNote" type="xs:string" minOccurs="0"/>
      <xs:element name="breastfeeding" type="xs:boolean" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ChildPostDeliveryRecordType">
    <xs:sequence>
      <xs:element name="ordinalNumber" type="xs:int"/>
      <xs:element name="weight" type="tns:PQType" minOccurs="0"/>
      <xs:element name="apgarScore1" type="xs:int" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Apgar (0..10) efter 1 minut</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="apgarScore5" type="xs:int" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Apgar (0..10) efter 5 minut</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="apgarScore10" type="xs:int" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Apgar (0..10) efter 10 minut</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LaboratoryOrderOutcomeType">
    <xs:sequence>
      <xs:element name="laboratoryOrderOutcomeHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="laboratoryOrderOutcomeBody" type="tns:LaboratoryOrderOutcomeBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LaboratoryOrderOutcomeBodyType">
    <xs:sequence>
      <xs:element name="resultType" type="xs:string"/>
      <xs:element name="registrationTime" type="tns:TimeStampType"/>
      <xs:element name="discipline" type="xs:string"/>
      <xs:element name="resultReport" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="resultComment" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="accountableHeathcareProfessional" type="tns:HealthcareProfessionalType" minOccurs="0"/>
      <xs:element name="analysis" type="tns:AnalysisType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="order" type="tns:OrderType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MaternityMedicalRecordType">
    <xs:sequence>
      <xs:element name="maternityMedicalRecordHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="maternityMedicalRecordBody" type="tns:MaternityMedicalRecordBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MaternityMedicalRecordBodyType">
    <xs:sequence>
      <xs:element name="registrationRecord" type="tns:RegistrationRecordType" minOccurs="0"/>
      <xs:element name="pregnancyCheckupRecord" type="tns:PregnancyCheckupRecordType" minOccurs="0"/>
      <xs:element name="postDeliveryRecord" type="tns:PostDeliveryRecordType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RegistrationRecordType">
    <xs:sequence>
      <xs:element name="lastMenstrualPeriod" type="tns:DateType" minOccurs="0"/>
      <xs:element name="indicationPregnancy" type="tns:DateType" minOccurs="0"/>
      <xs:element name="contraceptiveDiscontinued" type="tns:DateType" minOccurs="0"/>
      <xs:element name="expectedDayOfDeliveryFromLastMenstrualPeriod" type="tns:DateType" minOccurs="0"/>
      <xs:element name="expectedDayOfDeliveryFromUltrasoundScan" type="tns:DateType" minOccurs="0"/>
      <xs:element name="expectedDayOfDeliveryFromEmbryonicTransfer" type="tns:DateType" minOccurs="0"/>
      <xs:element minOccurs="0" name="length" type="tns:PQType"/>
      <xs:element name="weight" type="tns:PQType" minOccurs="0"/>
      <xs:element minOccurs="0" name="bodyMassIndex" type="tns:PQType"/>
      <xs:element name="infertility" type="xs:decimal" minOccurs="0"/>
      <xs:element name="previousGravidityAndParity" type="tns:PreviousGravidityAndParityType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="diseasesThrombosis" type="xs:boolean" minOccurs="0"/>
      <xs:element name="diseasesEndocineDiseases" type="xs:boolean" minOccurs="0"/>
      <xs:element name="diseasesRecurrentUrinaryTractInfections" type="xs:boolean" minOccurs="0"/>
      <xs:element name="diseasesDiabetesMellitus" type="xs:boolean" minOccurs="0"/>
      <xs:element name="medicationDuringPregnacy" type="tns:MedicationType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="assessmentAtFirstContactStandardCare" type="xs:boolean" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PreviousGravidityAndParityType">
    <xs:sequence>
      <xs:element name="year" type="xs:int"/>
      <xs:element name="month" type="xs:int"/>
      <xs:element name="delivery" type="codes:DeliveryCodeEnum" minOccurs="0"/>
      <xs:element name="healthcareFacility" type="xs:string" minOccurs="0"/>
      <xs:element name="progress" type="xs:string" minOccurs="0"/>
      <xs:element minOccurs="0" name="sex" type="codes:SexCodeEnum"/>
      <xs:element name="weightOfChild" type="tns:PQType" minOccurs="0"/>
      <xs:element name="gestation" type="xs:int" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MedicationType">
    <xs:sequence>
      <xs:element name="medicament" type="xs:string"/>
      <xs:element name="dosage" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PregnancyCheckupRecordType">
    <xs:sequence>
      <xs:element name="completeWeeksOfGestation" type="xs:int" minOccurs="0"/>
      <xs:element name="weight" type="tns:PQType" minOccurs="0"/>
      <xs:element name="symphysisFundalHeight" type="tns:PQType" minOccurs="0"/>
      <xs:element name="haemoglobin" type="tns:PQType" minOccurs="0"/>
      <xs:element name="bloodPressureSystolic" type="tns:PQType" minOccurs="0"/>
      <xs:element name="bloodPressureDiastolic" type="tns:PQType" minOccurs="0"/>
      <xs:element minOccurs="0" name="plasmaGlucose" type="tns:MeasurementType"/>
      <xs:element minOccurs="0" name="proteinuria" type="tns:PQType"/>
      <xs:element minOccurs="0" name="glycosuria" type="tns:PQType"/>
      <xs:element name="fetalPosition" type="codes:FetalPositionCodeEnum" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="fetalPresentation" type="codes:FetalPresentationCodeEnum" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="fetalHeartRate" type="tns:PQType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="typeOfLeave" type="codes:TypeOfLeaveCodeEnum" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="medicationSinceRegistration" type="tns:MedicationType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ReferralOutcomeType">
    <xs:sequence>
      <xs:element name="referralOutcomeHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="referralOutcomeBody" type="tns:ReferralOutcomeBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ReferralOutcomeBodyType">
    <xs:sequence>
      <xs:element name="referralOutcomeTypeCode" type="codes:ReferralOutcomeTypeCodeEnum"/>
      <xs:element name="referralOutcomeTitle" type="xs:string"/>
      <xs:element name="referralOutcomeText" type="xs:string"/>
      <xs:element name="clinicalInformation" type="tns:ClinicalInformationType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="act" type="tns:ActType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="referral" type="tns:ReferralType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ClinicalInformationType">
    <xs:sequence>
      <xs:element name="clinicalInformationCode" type="tns:ClinicalInformationCodeType"/>
      <xs:element name="clinicalInformationText" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ClinicalInformationCodeType">
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="codeSystem" type="tns:ClinicalInformationCodeCodeSystemType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="ClinicalInformationCodeCodeSystemType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="1.2.752.116.1.1.1.1.3"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/khaleddaham/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/actoutcome/trunk/schemas/core_components/clinicalprocess_healthcond_actoutcome_enum_3.0.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:actoutcome:enums:3" elementFormDefault="qualified" attributeFormDefault="unqualified" version="3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:actoutcome:enums:3">
  <xs:simpleType name="MediaTypeEnum">
    <xs:union memberTypes="tns:ApplicationMediaEnum tns:AudioMediaTypeEnum tns:ImageMediaTypeEnum tns:ModelMediaTypeEnum tns:MultipartMediaTypeEnum tns:TextMediaTypeEnum tns:VideoMediaTypeEnum"/>
  </xs:simpleType>
  <xs:simpleType name="ApplicationMediaEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="application/dicom"/>
      <xs:enumeration value="application/msword"/>
      <xs:enumeration value="application/pdf"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AudioMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="audio/basic"/>
      <xs:enumeration value="audio/k32adpcm"/>
      <xs:enumeration value="audio/mpeg"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DeliveryCodeEnum">
    <xs:restriction base="xs:integer">
      <xs:enumeration value="0">
        <xs:annotation>
          <xs:documentation>Ej angivet</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="1">
        <xs:annotation>
          <xs:documentation>X-gravid</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="2">
        <xs:annotation>
          <xs:documentation>Spontan abort</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="4">
        <xs:annotation>
          <xs:documentation>Dödfött</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="5">
        <xs:annotation>
          <xs:documentation>Levande fött</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FetalPositionCodeEnum">
    <xs:restriction base="xs:integer">
      <xs:enumeration value="0">
        <xs:annotation>
          <xs:documentation>huvud</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="1">
        <xs:annotation>
          <xs:documentation>säte</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="2">
        <xs:annotation>
          <xs:documentation>snedläge</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="3">
        <xs:annotation>
          <xs:documentation>tvärläge</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FetalPresentationCodeEnum">
    <xs:restriction base="xs:integer">
      <xs:enumeration value="0">
        <xs:annotation>
          <xs:documentation>Huvud</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="1">
        <xs:annotation>
          <xs:documentation>Säte</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="2">
        <xs:annotation>
          <xs:documentation>snedläge</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="3">
        <xs:annotation>
          <xs:documentation>tvärläge</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ImageMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="image/g3fax"/>
      <xs:enumeration value="image/gif"/>
      <xs:enumeration value="image/jpeg"/>
      <xs:enumeration value="image/png"/>
      <xs:enumeration value="image/tiff"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ModelMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="model/vrml"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MultipartMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="multipart/x-hl7-cda-level1"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ReferralOutcomeTypeCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="SS">
        <xs:annotation>
          <xs:documentation>Slutsvar på remissfråga</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SR">
        <xs:annotation>
          <xs:documentation>Svar på remissfråga</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ExaminationStatusCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Initierad">
        <xs:annotation>
          <xs:documentation>Initierad</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Planerad">
        <xs:annotation>
          <xs:documentation>Planerad (bevakad)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Tidbokad">
        <xs:annotation>
          <xs:documentation>Tidbokad</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Uppskjuten">
        <xs:annotation>
          <xs:documentation>Uppskjuten</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Annullerad">
        <xs:annotation>
          <xs:documentation>Annullerad</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Pågående">
        <xs:annotation>
          <xs:documentation>Pågående</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Avvakta">
        <xs:annotation>
          <xs:documentation>Avvakta</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Avbruten">
        <xs:annotation>
          <xs:documentation>Avbruten</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Avklarad">
        <xs:annotation>
          <xs:documentation>Avklarad</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Inaktuell">
        <xs:annotation>
          <xs:documentation>Inaktuell</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Makulerad">
        <xs:annotation>
          <xs:documentation>Makulerad</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TypeOfResultCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="PREL">
        <xs:annotation>
          <xs:documentation>Preliminärsvar</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DEF">
        <xs:annotation>
          <xs:documentation>Definitivsvar</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="TILL">
        <xs:annotation>
          <xs:documentation>Tilläggssvar</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SexCodeEnum">
    <xs:restriction base="xs:int">
      <xs:enumeration value="0">
        <xs:annotation>
          <xs:documentation>okänt</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="1">
        <xs:annotation>
          <xs:documentation>man</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="2">
        <xs:annotation>
          <xs:documentation>kvinna</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="9">
        <xs:annotation>
          <xs:documentation>ej tillämpligt</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TextMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="text/html"/>
      <xs:enumeration value="text/plain"/>
      <xs:enumeration value="text/rtf"/>
      <xs:enumeration value="text/sgml"/>
      <xs:enumeration value="text/x-hl7-ft"/>
      <xs:enumeration value="text/xml"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TypeOfLeaveCodeEnum">
    <xs:restriction base="xs:integer">
      <xs:enumeration value="0">
        <xs:annotation>
          <xs:documentation>Sjukskrivning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="1">
        <xs:annotation>
          <xs:documentation>Havandekapsledighet</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="2">
        <xs:annotation>
          <xs:documentation>Föräldrarledighet</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="VideoMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="video/mpeg"/>
      <xs:enumeration value="video/x-avi"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ResultCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="OK"/>
      <xs:enumeration value="ERROR"/>
      <xs:enumeration value="INFO"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ErrorCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="INVALID_REQUEST"/>
      <xs:enumeration value="TRANSFORMATION_ERROR"/>
      <xs:enumeration value="APPLICATION_ERROR"/>
      <xs:enumeration value="TECHNICAL_ERROR"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/khaleddaham/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/actoutcome/trunk/schemas/core_components/itintegration_registry_1.0.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="urn:riv:itintegration:registry:1" elementFormDefault="qualified" version="1.0" xmlns="urn:riv:itintegration:registry:1" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:annotation>
    <xs:documentation>Beskrivning: 	Grundläggande informationsobjekt för domänen itintegration:registry (adressering av tjänster)
			
			Revisionshistorik: 2011-06-27 Mats Ekhammar, Callista Enterprise AB
				Added ServiceContractType
			
			Datum:			2011-05-04
			Beskrivning:	Initial version
			Författare:		marcus.krantz@callistaenterprise.se</xs:documentation>
  </xs:annotation>
  <xs:element name="LogicalAddress" type="LogicalAddressType"/>
  <xs:element name="ServiceContract" type="ServiceContractType"/>
  <xs:simpleType name="LogicalAddressType">
    <xs:annotation>
      <xs:documentation>Defines the type for logical address according to national reference architecture.
				Superseeds wsa:To as type for logical address header in RIVTA 2.1.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:complexType name="ServiceContractType">
    <xs:annotation>
      <xs:documentation>Type which describes a service contract. Used in interaction GetSupportedServiceContracts.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ServiceContractNamespace" type="xs:anyURI"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>http://tempuri.org</con:endpoint></con:endpoints><con:operation isOneWay="false" action="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1:GetImagingOutcome" name="GetImagingOutcome" bindingOperationName="GetImagingOutcome" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>http://tempuri.org</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:2">
   <soapenv:Header>
      <urn:LogicalAddress>?</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetImagingOutcome>
         <!--Zero or more repetitions:-->
         <urn1:careUnitHSAId>?</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>?</urn2:id>
            <urn2:type>?</urn2:type>
            <!--You may enter ANY elements at this point-->
         </urn1:patientId>
         <!--Optional:-->
         <urn1:timePeriod>
            <urn2:start>?</urn2:start>
            <urn2:end>?</urn2:end>
            <!--You may enter ANY elements at this point-->
         </urn1:timePeriod>
         <!--Optional:-->
         <urn1:sourceSystemHSAId>?</urn1:sourceSystemHSAId>
         <!--Zero or more repetitions:-->
         <urn1:careContactId>?</urn1:careContactId>
         <!--You may enter ANY elements at this point-->
      </urn1:GetImagingOutcome>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:2:GetImagingOutcome"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite name="TestSuite" id="98c7de18-b710-4243-9af6-bf88cdfcf9e3"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Basic Testcase" searchProperties="true" id="ff2826fe-8607-4be5-af60-b001b7e3c7df"><con:settings/><con:testStep type="groovy" name="GIVEN Basic Testcase data" id="c392e203-9b0f-491f-b8b7-2dfde2972e9e"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("Basic Testcase")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetImagingOutcome with patientId" id="7e6b21e8-39df-4ed2-bafe-7695b4b54c83"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetImagingOutcomeResponderBinding</con:interface><con:operation>GetImagingOutcome</con:operation><con:request name="WHEN calling GetImagingOutcome with patientId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value=""/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetImagingOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetImagingOutcome>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration/></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:2:GetImagingOutcome" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="assertionteststep" name="THEN ensure all schematron rules passes" id="b592e08e-fff6-4859-95a2-ddb92bd5f094"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>51e2c495-a5c8-408b-bb9d-9813e974696a</con:id><con:isGroup>false</con:isGroup><con:sourceId>7e6b21e8-39df-4ed2-bafe-7695b4b54c83</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
	new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure patientID in response is correct" id="d1ec928a-0e10-460f-a960-227e35e4b6b7"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>0e451ae2-9fef-4dbd-b9fb-b8c3f97a49ba</con:id><con:isGroup>false</con:isGroup><con:sourceId>7e6b21e8-39df-4ed2-bafe-7695b4b54c83</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import static com.eviware.soapui.support.StringUtils.hasContent
import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:3'

def imaging = holder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetImagingOutcomeResponse/urn:imagingOutcome')

assert imaging.size() > 0

imaging.each {l ->
    def imagingOutcomeHolder = new XmlHolder( l )
    holder.namespaces.each {key, value -> imagingOutcomeHolder.namespaces[key] = value}

    def patientId = imagingOutcomeHolder.getNodeValue('/urn:imagingOutcome/urn1:imagingOutcomeHeader/urn1:patientId/urn1:id')
    def patientIdType = imagingOutcomeHolder.getNodeValue('/urn:imagingOutcome/urn1:imagingOutcomeHeader/urn1:patientId/urn1:type')
    assert patientId == context.patientId
    assert patientIdType == context.patientIdType
}</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure result.resultCode equals OK" id="82700313-23b7-466f-accd-3a5f813cf0ac"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>9275dcd7-df6f-4321-ab96-8fb18f42efa9</con:id><con:isGroup>false</con:isGroup><con:sourceId>7e6b21e8-39df-4ed2-bafe-7695b4b54c83</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:resultCode[1]/text() = "OK"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure a result.logId is returned"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>588a373d-7db8-4d31-aba4-2ae5540e5cf7</con:id><con:isGroup>false</con:isGroup><con:sourceId>7e6b21e8-39df-4ed2-bafe-7695b4b54c83</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>c392e203-9b0f-491f-b8b7-2dfde2972e9e</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Date Boundaries" searchProperties="true" id="f1e35184-d3fc-479e-9146-aa28af127704"><con:settings/><con:testStep type="groovy" name="GIVEN Date Boundaries data" id="4c249401-5449-4e6e-960e-45f1e1f55186"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("Date Boundaries")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetImagingOutcome with date boundaries" id="21f9987a-04ff-4d34-82bf-72abad88e6f7"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetImagingOutcomeResponderBinding</con:interface><con:operation>GetImagingOutcome</con:operation><con:request name="WHEN calling GetImagingOutcome with date boundaries"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="DateResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetImagingOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetImagingOutcome>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration/></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:2:GetImagingOutcome" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="assertionteststep" name="THEN ensure schematron rules passes" id="596e27e4-6a6d-4b4b-84d6-a7a18d7e8749"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>ea841808-78f3-4aaa-8246-c18d624e5d65</con:id><con:isGroup>false</con:isGroup><con:sourceId>21f9987a-04ff-4d34-82bf-72abad88e6f7</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure dates in response are valid" id="898f031c-d725-441d-bc6a-b183e056ca02"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>fc0806d9-c0f6-440d-be48-6feabb2d2335</con:id><con:isGroup>false</con:isGroup><con:sourceId>21f9987a-04ff-4d34-82bf-72abad88e6f7</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:3'
def diagnoses = holder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetImagingOutcomeResponse/urn:imagingOutcome')
def offending = []
assert diagnoses.size() > 0

diagnoses.each { doc ->
    def imagingOutcomeHolder = new XmlHolder( doc )
    holder.namespaces.each {key, value -> imagingOutcomeHolder.namespaces[key] = value}

    def documentId = imagingOutcomeHolder.getNodeValue('/urn:imagingOutcome/urn1:imagingOutcomeHeader/urn1:documentId')
    def authorTime = imagingOutcomeHolder.getNodeValue('/urn:imagingOutcome/urn1:imagingOutcomeHeader/urn1:accountableHealthcareProfessional/urn1:authorTime')
    authorTime = authorTime.substring(0, 8)
    def signatureTime = imagingOutcomeHolder.getNodeValue('/urn:imagingOutcome/urn1:imagingOutcomeHeader/urn1:legalAuthenticator/urn1:signatureTime')
    signatureTime = signatureTime == null ? null : signatureTime.substring(0, 8)
    def imagingOutcomeTime = imagingOutcomeHolder.getNodeValue('urn:imagingOutcome/urn1:imagingOutcomeBody/urn1:imagingOutcomeTime')
    imagingOutcomeTime = imagingOutcomeTime == null ? null : imagingOutcomeTime.substring(0, 8)
    if ((context.timePeriodStart > authorTime || authorTime > context.timePeriodEnd) &amp;&amp;
            (signatureTime == null || context.timePeriodStart > signatureTime || signatureTime > context.timePeriodEnd) &amp;&amp;
            (imagingOutcomeTime == null || context.timePeriodStart > imagingOutcomeTime || imagingOutcomeTime > context.timePeriodEnd)) {
        offending.add(documentId)
    }
}

if(!offending.isEmpty()) {
    log.error("DocumentIds $offending do not contain dates within the specified interval")
    assert(false)
}</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure document id's are valid" id="85493a11-6ddb-40c1-9be9-be39e7626944"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>15c3c72d-5d0d-40f8-aa22-827f60c623e1</con:id><con:isGroup>false</con:isGroup><con:sourceId>21f9987a-04ff-4d34-82bf-72abad88e6f7</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:3'

def documentIds = holder.getNodeValues('/soapenv:Envelope/soapenv:Body/urn:GetImagingOutcomeResponse/urn:imagingOutcome/urn1:imagingOutcomeHeader/urn1:documentId') as List

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

log.debug("Assert documentIds, unexpectedDocumentIds:$unexpectedDocumentIds,\nexpectedDocumentIds, $expectedDocumentIds,\nfound documentIds $documentIds")
def missingExpectedIds = []
def extraUnexpectedIds= []

documentIds.each {id ->
    if (unexpectedDocumentIds.contains(id)) {
        extraUnexpectedIds.add(id)
    }
}

expectedDocumentIds.each {id ->
    if (!documentIds.contains(id)) {
        missingExpectedIds.add(id)
    }
}

if(!missingExpectedIds.isEmpty() || !extraUnexpectedIds.isEmpty()) {
	    log.error("Response contains unexpected DocumentIds: $extraUnexpectedIds and/or does not contain  expected DocumentIds: $missingExpectedIds")
    assert(false)
}
</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure result.resultCode equals OK" id="d1cdd0f2-e6f6-4427-9188-f12bde5d0767"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>2a8c5848-c7c1-47a0-9275-cdda393eee81</con:id><con:isGroup>false</con:isGroup><con:sourceId>21f9987a-04ff-4d34-82bf-72abad88e6f7</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:resultCode[1]/text() = "OK"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure a result.logId is returned"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>dc3edd1a-71f5-4850-8e7b-b7456fa978b7</con:id><con:isGroup>false</con:isGroup><con:sourceId>21f9987a-04ff-4d34-82bf-72abad88e6f7</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>4c249401-5449-4e6e-960e-45f1e1f55186</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CareUnitHSAId Filter" searchProperties="true" id="b99a0a4d-4272-4e1b-875b-08ed048f2638"><con:settings/><con:testStep type="groovy" name="GIVEN CareUnitHSAId data" id="3f1b8723-44ee-4aa3-873e-0459461c79ab"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("CareUnitHSAId Filter")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetImagingOutcome with careUnitHSAId" id="14804717-0b5b-4ebe-a5ec-8d4e8ed519b2"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetImagingOutcomeResponderBinding</con:interface><con:operation>GetImagingOutcome</con:operation><con:request name="WHEN calling GetImagingOutcome with careUnitHSAId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareUnitHSAIdResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value=""/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetImagingOutcome>
         <urn1:careUnitHSAId>${careUnitId1}</urn1:careUnitHSAId><urn1:careUnitHSAId>${careUnitId2}</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
            </urn1:patientId>
      </urn1:GetImagingOutcome>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration/></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:2:GetImagingOutcome" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="assertionteststep" name="THEN ensure schematron rules passes" id="237e8135-7943-4926-a987-0a053aad7619"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>fe06e792-9cf7-4b34-b979-b847a23e4c8b</con:id><con:isGroup>false</con:isGroup><con:sourceId>14804717-0b5b-4ebe-a5ec-8d4e8ed519b2</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure careUnitHSAId are correct" id="ae8f4cce-0d6a-47df-ab64-c1efd4d16ab4"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>cc2ac32d-1b40-423e-81a5-38adab898677</con:id><con:isGroup>false</con:isGroup><con:sourceId>14804717-0b5b-4ebe-a5ec-8d4e8ed519b2</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:3'
def h = holder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetImagingOutcomeResponse/urn:imagingOutcome')
assert h.size() != 0
def offending = []

h.each { obj ->
    def objHolder = new XmlHolder( obj )
    holder.namespaces.each {key, value -> objHolder.namespaces[key] = value}

    def documentId = objHolder.getNodeValue('/urn:imagingOutcome/urn1:imagingOutcomeHeader/urn1:documentId')
    def careUnitHSAId = objHolder.getNodeValue('/urn:imagingOutcome/urn1:imagingOutcomeHeader/urn1:accountableHealthcareProfessional/urn1:healthcareProfessionalCareUnitHSAId')

    if (careUnitHSAId != context.careUnitId1 &amp;&amp; careUnitHSAId != context.careUnitId2) {
        offending.add("&lt;documentId: ${documentId} careUnitHSAId: ${careUnitHSAId}>")
    }
}

if(!offending.isEmpty()) {
    log.error("Response contains documents with unexpected CareUnitHSAId: ${offending}")
    assert(false)
}</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure result.resultCode equals OK" id="501ed996-144b-44f3-b561-35c29565da5f"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>34415cd1-aed6-4478-85a3-0237d8e73f33</con:id><con:isGroup>false</con:isGroup><con:sourceId>14804717-0b5b-4ebe-a5ec-8d4e8ed519b2</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:resultCode[1]/text() = "OK"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure a result.logId is returned"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>7d002a10-ad43-41f4-b69d-dcec3d62b516</con:id><con:isGroup>false</con:isGroup><con:sourceId>14804717-0b5b-4ebe-a5ec-8d4e8ed519b2</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>3f1b8723-44ee-4aa3-873e-0459461c79ab</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints><con:breakPoints><con:testStepId>237e8135-7943-4926-a987-0a053aad7619</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CareContactId Filter" searchProperties="true" id="ed455de5-8316-47ba-aea9-969b710e84ca"><con:settings/><con:testStep type="groovy" name="GIVEN CareContactId data" id="80170673-9e88-4f8f-a174-cda8e9509956"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("CareContactId Filter")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetImagingOutcome with careContactId" id="12fbaecd-8f79-437e-a106-5353cf0b5f04"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetImagingOutcomeResponderBinding</con:interface><con:operation>GetImagingOutcome</con:operation><con:request name="WHEN calling GetImagingOutcome with careContactId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareContactIdResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetImagingOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
            </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetImagingOutcome>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration/></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:2:GetImagingOutcome" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="assertionteststep" name="THEN ensure schematron rules passes" id="e99f897c-4367-4bc9-8081-4bf1dab5ead2"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>056b6d08-d8cd-4b59-b773-60c94e9a9757</con:id><con:isGroup>false</con:isGroup><con:sourceId>12fbaecd-8f79-437e-a106-5353cf0b5f04</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def constraintsPath = messageExchange.modelItem.testStep.testCase.testSuite.project.getPropertyValue( "constraintsPath" )

def failures = validator.validateMessage(messageExchange.response.responseContent,
    new File(utils.projectPath + File.separator + "constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure careContactId are correct" id="5e067405-df09-45b8-bb75-a4df8ec8f209"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>7f3a7e56-76c0-44a0-a823-0e423708a0f2</con:id><con:isGroup>false</con:isGroup><con:sourceId>12fbaecd-8f79-437e-a106-5353cf0b5f04</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def responseHolder = new XmlHolder( messageExchange.response.responseContent )
responseHolder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
responseHolder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1'
responseHolder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:3'
def imaging = responseHolder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetImagingOutcomeResponse/urn:imagingOutcome')

assert imaging.size() != 0

imaging.each {l ->
    def imagingOutcomeHolder = new XmlHolder( l )
    responseHolder.namespaces.each {key, value -> imagingOutcomeHolder.namespaces[key] = value}

    def sourceSystemHSAId = imagingOutcomeHolder.getNodeValue('/urn:imagingOutcome/urn1:imagingOutcomeHeader/urn1:sourceSystemHSAId')
    def careContactId = imagingOutcomeHolder.getNodeValue('/urn:imagingOutcome/urn1:imagingOutcomeHeader/urn1:careContactId')
    assert sourceSystemHSAId == context.sourceSystemHSAId
    assert careContactId == context.careContactId
}</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure result.resultCode equals OK" id="f0955032-51ea-4bf2-8503-c126ece06664"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>fe6d56ca-1d57-4344-8f3d-0a9e60351a24</con:id><con:isGroup>false</con:isGroup><con:sourceId>12fbaecd-8f79-437e-a106-5353cf0b5f04</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:resultCode[1]/text() = "OK"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure a result.logId is returned"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>12e48b44-5339-4f62-aa44-97493ccd4039</con:id><con:isGroup>false</con:isGroup><con:sourceId>12fbaecd-8f79-437e-a106-5353cf0b5f04</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="HTTPHeader Filter" searchProperties="true" id="e4c4f4b6-a477-485d-b2f2-ac9d84b1d71e"><con:settings/><con:testStep type="groovy" name="GIVEN HTTPHeader data" id="3192ae6a-0d15-4451-acdd-3c457b76e9ef"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("CareUnitHSAId Filter")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetImagingOutcome with HTTPHeader" id="e55acfc9-2e5a-46d9-b1d3-c2e2ab1d4c7b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetImagingOutcomeResponderBinding</con:interface><con:operation>GetImagingOutcome</con:operation><con:request name="WHEN calling GetImagingOutcome with HTTPHeader"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="x-mock-response" value="CareUnitHSAIdResponse" xmlns="http://eviware.com/soapui/config"/></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetImagingOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
            </urn1:patientId>
      </urn1:GetImagingOutcome>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration/></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:2:GetImagingOutcome" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="assertionteststep" name="THEN ensure schematron rules passes" id="cd291dbb-1e0e-4a0e-9538-8d93b2d2cfff"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"/></con:testStep><con:testStep type="assertionteststep" name="AND ensure patientId is correct" id="498d8360-7a00-4677-9fdd-399d50a0ba7f"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>1a757245-2525-42e0-9298-d8fc2c222ffb</con:id><con:isGroup>false</con:isGroup><con:sourceId>e55acfc9-2e5a-46d9-b1d3-c2e2ab1d4c7b</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import static com.eviware.soapui.support.StringUtils.hasContent
import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:3'

def imagingOutcome = holder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetImagingOutcomeResponse/urn:imagingOutcome')

assert imagingOutcome.size() > 0

imagingOutcome.each {l ->
    def imagingOutcomeHolder = new XmlHolder( l )
    holder.namespaces.each {key, value -> imagingOutcomeHolder.namespaces[key] = value}

    def patientId = imagingOutcomeHolder.getNodeValue('/urn:imagingOutcome/urn1:imagingOutcomeHeader/urn1:patientId/urn1:id')
    def patientIdType = imagingOutcomeHolder.getNodeValue('/urn:imagingOutcome/urn1:imagingOutcomeHeader/urn1:patientId/urn1:type')
    assert patientId == context.patientId
        assert patientIdType == context.patientIdType

}</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure document id's are correct" id="1da97b3c-dfc0-4fe1-98b1-0e179b146922"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>4fccdae1-e0e1-4d3f-a87d-c65ae33cb267</con:id><con:isGroup>false</con:isGroup><con:sourceId>e55acfc9-2e5a-46d9-b1d3-c2e2ab1d4c7b</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="GroovyScriptAssertion" name="Script Assertion"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:3'

def documentIds = holder.getNodeValues('/soapenv:Envelope/soapenv:Body/urn:GetImagingOutcomeResponse/urn:imagingOutcome/urn1:imagingOutcomeHeader/urn1:documentId') as List

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

log.debug("Assert documentIds, unexpectedDocumentIds:$unexpectedDocumentIds,\nexpectedDocumentIds, $expectedDocumentIds,\nfound documentIds $documentIds")

def missingExpectedIds = []
def extraUnexpectedIds = []

documentIds.each {id ->
    if (unexpectedDocumentIds.contains(id)) {
        extraUnexpectedIds.add(id)
    }
}

expectedDocumentIds.each {id ->
    if (!documentIds.contains(id)) {
        missingExpectedIds.add(id)
    }
}

if(!missingExpectedIds.isEmpty() || !extraUnexpectedIds.isEmpty()) {
	log.error("Response contains unexpected DocumentIds: $extraUnexpectedIds and/or does not contain  expected DocumentIds: $missingExpectedIds")
	assert(false)
}</scriptText></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure result.resultCode equals OK" id="c322d4e1-ecbe-45a6-b2b7-27024a4c371f"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>95465d6d-4bc5-42d7-87ad-eaf59f7c3aa5</con:id><con:isGroup>false</con:isGroup><con:sourceId>e55acfc9-2e5a-46d9-b1d3-c2e2ab1d4c7b</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:resultCode[1]/text() = "OK"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure result.logId is returned"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>8b11b289-b0d9-47f3-a2da-bc6b25e4a465</con:id><con:isGroup>false</con:isGroup><con:sourceId>e55acfc9-2e5a-46d9-b1d3-c2e2ab1d4c7b</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NonExistent PatientId" searchProperties="true" id="fd13eadb-b936-46f1-af95-5356ec1077a2"><con:settings/><con:testStep type="groovy" name="GIVEN NonExistent PatientId data" id="11c07d3e-3820-43fd-9702-82095422a9b9"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("NonExistent PatientId")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetImagingOutcome with nonexistent patientId" id="8d197036-d7a2-4903-84ba-c71de3dd340b"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetImagingOutcomeResponderBinding</con:interface><con:operation>GetImagingOutcome</con:operation><con:request name="WHEN calling GetImagingOutcome with nonexistent patientId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="EmptyResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetImagingOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetImagingOutcome>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration/></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:2:GetImagingOutcome" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="assertionteststep" name="THEN ensure zero ImageOutcome in response" id="94ed3bb7-3241-402d-9538-8a7b8481c405"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>101cb724-1e1c-4bf9-8ea1-a5d0ad33d488</con:id><con:isGroup>false</con:isGroup><con:sourceId>8d197036-d7a2-4903-84ba-c71de3dd340b</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:2';
count(//urn:GetImagingOutcomeResponse[1]/urn:imagingOutcome)</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure result.resultCode equals OK" id="d5ab592d-34e1-498e-a473-26ca24d26338"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>5eea2478-f14f-4e4b-8bbe-8a0acd94d37f</con:id><con:isGroup>false</con:isGroup><con:sourceId>8d197036-d7a2-4903-84ba-c71de3dd340b</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:resultCode[1]/text() = "OK"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure a result.logId is returned"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>ca9d87e0-7fd6-4197-8ad2-68de10d493e8</con:id><con:isGroup>false</con:isGroup><con:sourceId>8d197036-d7a2-4903-84ba-c71de3dd340b</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>94ed3bb7-3241-402d-9538-8a7b8481c405</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NonExistent CareContactId" searchProperties="true" id="5df1e8fa-a9df-447d-ac17-60d03295eabb"><con:settings/><con:testStep type="groovy" name="GIVEN NonExistent CareContactId data" id="12ef6caa-4aa9-4a36-8641-b9c8fcc3ac0d"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("NonExistent CareContactId")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetImagingOutcome with nonexistent careContactId" id="deeeebf8-9bac-4aaf-bfb7-211b954bda7f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetImagingOutcomeResponderBinding</con:interface><con:operation>GetImagingOutcome</con:operation><con:request name="WHEN calling GetImagingOutcome with nonexistent careContactId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="EmptyResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetImagingOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
            </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId2}</urn1:careContactId>
      </urn1:GetImagingOutcome>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration/></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:2:GetImagingOutcome" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="assertionteststep" name="THEN ensure zero imageOutcome in response" id="f9ea1359-1c8c-4f0f-8f16-10f8643cd97a"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>75afeb9c-dd0f-47eb-9c01-3a61d3d57254</con:id><con:isGroup>false</con:isGroup><con:sourceId>deeeebf8-9bac-4aaf-bfb7-211b954bda7f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:2';
count(//urn:GetImagingOutcomeResponse[1]/urn:imagingOutcome)</path><content>0</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure result.resultCode equals OK" id="b03338c9-cb1e-41c0-b761-5ab32c9d7f45"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>73ec9531-8e11-45a2-9ac8-d5c23de117f1</con:id><con:isGroup>false</con:isGroup><con:sourceId>deeeebf8-9bac-4aaf-bfb7-211b954bda7f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:resultCode[1]/text() = "OK"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure a result.logId is returned"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>45635cc5-1de5-4817-97c9-2d0e11e422b3</con:id><con:isGroup>false</con:isGroup><con:sourceId>deeeebf8-9bac-4aaf-bfb7-211b954bda7f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:logId[matches(., '.*')]</path><content>*</content><allowWildcards>true</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="Fault tests" id="9f7cffb9-9657-497b-8e81-9678d053ec94"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verify sourceSystemHSAId and CareContactId" searchProperties="true" id="db493a11-20af-4f5a-b5a2-fc03928507ff"><con:settings/><con:testStep type="groovy" name="Read data" id="443c047b-04ff-435e-9211-8095f9a9a836"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("SourceSystemHSAId and CareContactId")
</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetImagingOutcome with empty sourceSystemHSAId and careContactId set" id="36fa6d02-f282-47fd-8a30-8cbd68c52b81"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetImagingOutcomeResponderBinding</con:interface><con:operation>GetImagingOutcome</con:operation><con:request name="WHEN calling GetImagingOutcome with empty sourceSystemHSAId and careContactId set"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="ERROR"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value=""/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetImagingOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetImagingOutcome>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="Response SLA Assertion" name="Response SLA"><con:configuration><SLA>15000</SLA></con:configuration></con:assertion><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:2:GetImagingOutcome" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure result.resultCode equals ERROR" id="a6f07a9d-2c81-4c74-aace-cf9cdda56853"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>5abdb99b-48cb-44f8-b103-7394eaf6c95f</con:id><con:isGroup>false</con:isGroup><con:sourceId>36fa6d02-f282-47fd-8a30-8cbd68c52b81</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:resultCode[1]/text() = "ERROR"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure result.errorCode equals INVALID_REQUEST"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>a50cf7e1-711a-4aa7-9a49-7ac2d0187a25</con:id><con:isGroup>false</con:isGroup><con:sourceId>36fa6d02-f282-47fd-8a30-8cbd68c52b81</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:errorCode[1]/text() = "INVALID_REQUEST"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Verify sourceSystemHSAId and LogicalAddress" searchProperties="true" id="b8cc6466-47e5-40eb-9ebf-cd3821c17d07"><con:settings/><con:testStep type="groovy" name="Read data" id="79f147a5-1fee-4f56-b830-4a0a22730abd"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("SourceSystemHSAId and LogicalAddress")</script></con:config></con:testStep><con:testStep type="request" name="WHEN calling GetImagingOutcome and sourceSystemHSAId differs from logicalAddress" id="ac3ab119-b891-4a34-b0ef-9be3fed3cbbb"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetImagingOutcomeResponderBinding</con:interface><con:operation>GetImagingOutcome</con:operation><con:request name="WHEN calling GetImagingOutcome and sourceSystemHSAId differs from logicalAddress"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="ERROR"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value=""/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetImagingOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
      </urn1:GetImagingOutcome>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="Response SLA Assertion" name="Response SLA"><con:configuration><SLA>15000</SLA></con:configuration></con:assertion><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:2:GetImagingOutcome" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure result.resultCode equals ERROR" id="0d7fb681-9a2e-49fb-a1e9-6f8945e3f3cc"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>e283f58b-27d9-46d8-88fe-8ce468d55492</con:id><con:isGroup>false</con:isGroup><con:sourceId>ac3ab119-b891-4a34-b0ef-9be3fed3cbbb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:resultCode[1]/text() = "ERROR"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure result.errorCode equals INVALID_REQUEST"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>e48bf6ec-a2aa-4eeb-99dc-f4974515e4b8</con:id><con:isGroup>false</con:isGroup><con:sourceId>ac3ab119-b891-4a34-b0ef-9be3fed3cbbb</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetImagingOutcomeResponder:1';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetImagingOutcomeResponse[1]/urn:result[1]/urn1:errorCode[1]/text() = "INVALID_REQUEST"</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:xmlTemplates/><con:parameters/></con:reporting></con:soapui-project>