<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project activeEnvironment="Default" name="GetLaboratoryOrderOutcome" resourceRoot="${projectDir}" id="2f6f063d-2f1e-40c7-b91f-c897952e89ac" soapui-version="5.0.0-beta" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:WsdlInterface" wsaVersion="NONE" name="GetLaboratoryOrderOutcomeResponderBinding" type="wsdl" bindingName="{urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcome:3:rivtabp21}GetLaboratoryOrderOutcomeResponderBinding" soapVersion="1_1" anonymous="optional" definition="../../schemas/interactions/GetLaboratoryOrderOutcomeInteraction/GetLaboratoryOrderOutcomeInteraction_3.0_RIVTABP21.wsdl" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart="file:/Users/khaleddaham/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/actoutcome/trunk/schemas/interactions/GetLaboratoryOrderOutcomeInteraction/GetLaboratoryOrderOutcomeInteraction_3.0_RIVTABP21.wsdl"><con:part><con:url>file:/Users/khaleddaham/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/actoutcome/trunk/schemas/interactions/GetLaboratoryOrderOutcomeInteraction/GetLaboratoryOrderOutcomeInteraction_3.0_RIVTABP21.wsdl</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<wsdl:definitions name="GetLaboratoryOrderOutcomenteraction" targetNamespace="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcome:3:rivtabp21" xmlns:wsdl="http://schemas.xmlsoap.org/wsdl/" xmlns:soap="http://schemas.xmlsoap.org/wsdl/soap/" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tjsr="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3" xmlns:tjsi="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeInitiator:3" xmlns:tns="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcome:3:rivtabp21" xmlns:itr="urn:riv:itintegration:registry:1">
  <xs:annotation>
    <xs:documentation>Tjänsteinteraktionens namn: GetLaboratoryOrderOutcome
			 Beskrivning: 
			 Returnerar svar på en förfrågan om kemilaboratoriesvar för en patient
			 Revisioner: 
			 Tjänstedomän: clinicalprocess:healthcond:actoutcome
			 Tjänsteinteraktionstyp: Fråga-Svar
			 WS-profil: RIVTABP21
			 Förvaltas av: Sveriges Kommuner och Landsting</xs:documentation>
  </xs:annotation>
  <wsdl:types>
    <xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcome:3:rivtabp21">
      <xs:import schemaLocation="GetLaboratoryOrderOutcomeResponder_3.0.xsd" namespace="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3"/>
      <xs:import schemaLocation="../../core_components/itintegration_registry_1.0.xsd" namespace="urn:riv:itintegration:registry:1"/>
    </xs:schema>
  </wsdl:types>
  <wsdl:message name="GetLaboratoryOrderOutcomeRequest">
    <wsdl:part name="LogicalAddress" element="itr:LogicalAddress">
      <wsdl:documentation>National: The HSA-id of Inera AB ("national" aggregation service)
			Regional: The HSA-id of Inera AB (regional aggregation service)
			Specific Source system: The HSA-id of the source system</wsdl:documentation>
    </wsdl:part>
    <wsdl:part name="parameters" element="tjsr:GetLaboratoryOrderOutcome"/>
  </wsdl:message>
  <wsdl:message name="GetLaboratoryOrderOutcomeResponse">
    <wsdl:part name="parameters" element="tjsr:GetLaboratoryOrderOutcomeResponse"/>
  </wsdl:message>
  <wsdl:portType name="GetLaboratoryOrderOutcomeResponderInterface">
    <wsdl:operation name="GetLaboratoryOrderOutcome">
      <wsdl:input message="tns:GetLaboratoryOrderOutcomeRequest"/>
      <wsdl:output message="tns:GetLaboratoryOrderOutcomeResponse"/>
    </wsdl:operation>
  </wsdl:portType>
  <wsdl:binding name="GetLaboratoryOrderOutcomeResponderBinding" type="tns:GetLaboratoryOrderOutcomeResponderInterface">
    <soap:binding style="document" transport="http://schemas.xmlsoap.org/soap/http"/>
    <wsdl:operation name="GetLaboratoryOrderOutcome">
      <soap:operation soapAction="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3:GetLaboratoryOrderOutcome" style="document"/>
      <wsdl:input>
        <soap:header use="literal" message="tns:GetLaboratoryOrderOutcomeRequest" part="LogicalAddress"/>
        <soap:body use="literal" parts="parameters"/>
      </wsdl:input>
      <wsdl:output>
        <soap:body use="literal"/>
      </wsdl:output>
    </wsdl:operation>
  </wsdl:binding>
  <wsdl:service name="GetLaboratoryOrderOutcomeResponderService">
    <wsdl:port name="GetLaboratoryOrderOutcomeResponderPort" binding="tns:GetLaboratoryOrderOutcomeResponderBinding">
      <soap:address location="http://tempuri.org"/>
    </wsdl:port>
  </wsdl:service>
</wsdl:definitions>]]></con:content><con:type>http://schemas.xmlsoap.org/wsdl/</con:type></con:part><con:part><con:url>file:/Users/khaleddaham/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/actoutcome/trunk/schemas/interactions/GetLaboratoryOrderOutcomeInteraction/GetLaboratoryOrderOutcomeResponder_3.0.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3" elementFormDefault="qualified" attributeFormDefault="unqualified" version="3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3" xmlns:core="urn:riv:clinicalprocess:healthcond:actoutcome:3" xmlns:codes="urn:riv:clinicalprocess:healthcond:actoutcome:enums:3">
  <xs:import schemaLocation="../../core_components/clinicalprocess_healthcond_actoutcome_3.0.xsd" namespace="urn:riv:clinicalprocess:healthcond:actoutcome:3"/>
  <xs:import schemaLocation="../../core_components/clinicalprocess_healthcond_actoutcome_enum_3.0.xsd" namespace="urn:riv:clinicalprocess:healthcond:actoutcome:enums:3"/>
  <xs:element name="GetLaboratoryOrderOutcome" type="tns:GetLaboratoryOrderOutcomeType"/>
  <xs:element name="GetLaboratoryOrderOutcomeResponse" type="tns:GetLaboratoryOrderOutcomeResponseType"/>
  <xs:complexType name="GetLaboratoryOrderOutcomeType">
    <xs:sequence>
      <xs:element name="careUnitHSAId" type="core:HSAIdType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="patientId" type="core:PersonIdType"/>
      <xs:element name="timePeriod" type="core:DatePeriodType" minOccurs="0"/>
      <xs:element name="sourceSystemHSAId" type="core:HSAIdType" minOccurs="0"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="GetLaboratoryOrderOutcomeResponseType">
    <xs:sequence>
      <xs:element name="laboratoryOrderOutcome" type="core:LaboratoryOrderOutcomeType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="result" type="core:ResultType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/khaleddaham/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/actoutcome/trunk/schemas/core_components/clinicalprocess_healthcond_actoutcome_3.0.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:actoutcome:3" elementFormDefault="qualified" attributeFormDefault="unqualified" version="3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:actoutcome:3" xmlns:codes="urn:riv:clinicalprocess:healthcond:actoutcome:enums:3">
  <xs:import schemaLocation="./clinicalprocess_healthcond_actoutcome_enum_3.0.xsd" namespace="urn:riv:clinicalprocess:healthcond:actoutcome:enums:3"/>
  <!--Common datatypes-->
  <xs:complexType name="PatientSummaryHeaderType">
    <xs:sequence>
      <xs:element name="documentId" type="xs:string"/>
      <xs:element name="sourceSystemHSAId" type="tns:HSAIdType"/>
      <xs:element name="documentTitle" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="documentTime" type="tns:TimeStampType" maxOccurs="1" minOccurs="0"/>
      <xs:element name="patientId" type="tns:PersonIdType"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType"/>
      <xs:element name="legalAuthenticator" type="tns:LegalAuthenticatorType" minOccurs="0"/>
      <xs:element name="approvedForPatient" type="xs:boolean"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0"/>
      <xs:element name="nullified" type="xs:boolean" minOccurs="0"/>
      <xs:element name="nullifiedReason" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ActType">
    <xs:sequence>
      <xs:element name="actId" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="actCode" type="tns:ActCodeType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="actText" type="xs:string"/>
      <xs:element name="actTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="actResult" type="tns:MultimediaType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ObservationType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="1" maxOccurs="1"/>
      <xs:element name="type" type="tns:CVType" minOccurs="1" maxOccurs="1"/>
      <xs:element name="targetSite" type="tns:CVType" minOccurs="0"/>
      <xs:element name="time" type="tns:TimePeriodType" minOccurs="0"/>
      <xs:element name="method" type="tns:CVType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="value" type="tns:CVType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="valueNegation" type="xs:boolean" minOccurs="0" maxOccurs="1"/>
      <xs:element name="description" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="approvedForPatient" type="xs:boolean" minOccurs="0" maxOccurs="1"/>
      <xs:element name="location" type="tns:LocationType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="patient" type="tns:PatientType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="legalauthenticator" type="tns:LegalAuthenticatorType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="sourceSystem" type="tns:SourceSystemType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="relation" type="tns:RelationType" minOccurs="0" maxOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LocationType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="name" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="address" type="tns:AddressType"/>
      <xs:element name="telecom" type="tns:TelType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="SourceSystemType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="0" maxOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AddressType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="name" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="address" type="tns:AddressType"/>
      <xs:element name="telecom" type="tns:TelType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TelType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="name" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="address" type="tns:AddressType"/>
      <xs:element name="telecom" type="tns:TelType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RelationType">
    <xs:sequence>
      <xs:element name="code" type="tns:CVType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="referredInformation" type="tns:ReferredInformationType" minOccurs="1" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PatientType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="1" maxOccurs="1"/>
      <xs:element name="dateOfBirth" type="tns:DateType" minOccurs="1" maxOccurs="1"/>
      <xs:element name="gender" type="tns:CVType" minOccurs="0"/>
      <xs:element name="actTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="actResult" type="tns:MultimediaType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ReferredInformationType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="1" maxOccurs="1"/>
      <xs:element name="time" type="tns:ActCodeType" minOccurs="1" maxOccurs="1"/>
      <xs:element name="urn" type="xs:string"/>
      <xs:element name="informationOwner" type="tns:InformationOwnerType" minOccurs="1"/>
      <xs:element name="performerRole" type="tns:PerformerRoleType" minOccurs="1" maxOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="InformationOwnerType">
    <xs:sequence>
      <xs:element name="actId" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="actCode" type="tns:ActCodeType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="actText" type="xs:string"/>
      <xs:element name="actTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="actResult" type="tns:MultimediaType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PerformerRoleType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="code" type="tns:CVType" minOccurs="1" maxOccurs="1"/>
      <xs:element name="person" type="tns:PersonType"/>
      <xs:element name="careUnit" type="tns:CareUnitType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PersonType">
    <xs:sequence>
      <xs:element name="id" type="tns:IIType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="name" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CareUnitType">
    <xs:sequence>
      <xs:element name="actId" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="actCode" type="tns:ActCodeType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="actText" type="xs:string"/>
      <xs:element name="actTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="actResult" type="tns:MultimediaType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CareGiverType">
    <xs:sequence>
      <xs:element name="actId" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="actCode" type="tns:ActCodeType" minOccurs="0" maxOccurs="1"/>
      <xs:element name="actText" type="xs:string"/>
      <xs:element name="actTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="actResult" type="tns:MultimediaType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ActCodeType">
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="codeSystem" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ReferralType">
    <xs:sequence>
      <xs:element name="referralId" type="xs:string"/>
      <xs:element name="referralReason" type="xs:string" minOccurs="1"/>
      <xs:element name="referralTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="referralAuthor" type="tns:HealthcareProfessionalType"/>
      <xs:element minOccurs="0" name="careContactId" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ECGReferralType">
    <xs:sequence>
      <xs:element name="referralId" type="xs:string"/>
      <xs:element name="referralReason" type="xs:string" minOccurs="0"/>
      <xs:element name="anamnesis" type="xs:string" minOccurs="0"/>
      <xs:element name="careContactId" type="xs:string" minOccurs="0"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType"/>
      <xs:element name="attested" type="tns:LegalAuthenticatorType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OrderType">
    <xs:sequence>
      <xs:element name="orderId" type="xs:string"/>
      <xs:element name="orderReason" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AuthorType">
    <xs:sequence>
      <xs:element name="authorTime" type="tns:TimeStampType"/>
      <xs:element name="authorHSAId" type="tns:HSAIdType"/>
      <xs:element name="authorRoleCode" type="xs:string" minOccurs="0"/>
      <xs:element name="authorOtherRole" minOccurs="0" type="tns:AuthorOtherRoleType"/>
      <xs:element name="authorName" type="xs:string" minOccurs="0"/>
      <xs:element name="authorOrgUnitHSAid" type="tns:HSAIdType"/>
      <xs:element name="authorOrgUnitName" type="xs:string"/>
      <xs:element name="authorOrgUnitAddress" type="xs:string" minOccurs="0"/>
      <xs:element name="careUnitHSAid" type="tns:HSAIdType"/>
      <xs:element name="careGiverHSAid" type="tns:HSAIdType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AuthorOtherRoleType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="authorOtherRoleCode" type="xs:string"/>
      <xs:element name="authorOtherRoleCodeOID" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LegalAuthenticatorType">
    <xs:annotation>
      <xs:documentation>Information om signering
                
                signatureTime: 
                    Tidpunkt för signering, format ÅÅÅÅMMDDttmmss. 
                assignedEntity: 
                    Information om person som signerat dokumentet</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="signatureTime" type="tns:TimeStampType"/>
      <xs:element name="legalAuthenticatorHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element minOccurs="0" name="legalAuthenticatorName" type="xs:string"/>
      <xs:element minOccurs="0" name="legalAuthenticatorRoleCode" type="tns:CVType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DatePeriodType">
    <xs:annotation>
      <xs:documentation>Används för att specificera ett datumintervall
                med hjälp av start- och slutdatum.
                
                start: 
                    Startdatum på formatet ÅÅÅÅMMDD
                end: 
                    Slutdatum på formatet ÅÅÅÅMMDD</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="start" type="tns:DateType" minOccurs="0"/>
      <xs:element name="end" type="tns:DateType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <!--YYYYMMDD-->
  <xs:simpleType name="DateType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="(19|20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])"/>
    </xs:restriction>
  </xs:simpleType>
  <!--@TODO Should we have maxlength 64?-->
  <xs:simpleType name="HSAIdType">
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:complexType name="MultimediaType">
    <xs:sequence>
      <xs:element name="id" type="xs:string" minOccurs="0"/>
      <xs:element name="mediaType" type="codes:MediaTypeEnum"/>
      <xs:element name="value" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="reference" type="xs:anyURI" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PersonIdType">
    <xs:sequence>
      <xs:element name="id" type="xs:string"/>
      <xs:element name="type" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PQType">
    <xs:sequence>
      <xs:element name="value" type="xs:double"/>
      <xs:element name="unit" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="TimePeriodType">
    <xs:annotation>
      <xs:documentation>Används för att specificera ett datumintervall
                med hjälp av start- och slutdatum.
                
                start: 
                Startdatum på formatet YYYYMMDDhhmmss
                end: 
                Slutdatum på formatet YYYYMMDDhhmmss</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="start" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="end" type="tns:TimeStampType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="TimeStampType">
    <xs:annotation>
      <xs:documentation>A quantity specifying a point on the axis of natural time.
                A point in time is most often represented as a calendar
                expression.
                
                The time has the format YYYYMMDDhhmmss</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string">
      <xs:pattern value="(19|20)\d\d(0[1-9]|1[012])(0[1-9]|[12][0-9]|3[01])(0[0-9]|1[0-9]|2[0123])([0-5])([0-9])([0-5])([0-9])"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:complexType name="MeasurementType">
    <xs:sequence>
      <xs:element name="code" type="tns:CVType"/>
      <xs:element name="value" type="tns:PQType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ResultType">
    <xs:annotation>
      <xs:documentation></xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="resultCode" type="codes:ResultCodeEnum"/>
      <xs:element name="errorCode" type="codes:ErrorCodeEnum" minOccurs="0"/>
      <xs:element name="logId" type="xs:string"/>
      <xs:element minOccurs="0" name="subCode" type="xs:string"/>
      <xs:element name="message" type="xs:string" minOccurs="0"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="HealthcareProfessionalType">
    <xs:annotation>
      <xs:documentation>Information om hälso- och omsorgspesonal
                
                healthcareProfessionalHsaId: 
                HSA-id för vård- och omsorgspersonal 
                healthcareProfessionalName
                Namn på vård- och omsorgspersonal
                healthcareProfessionalRoleCode: 
                Information om personens befattning. Om möjligt skall KV Befattning (OID 1.2.752.129.2.2.1.4), se 
                http://www.inera.se/Documents/TJANSTER_PROJEKT/Katalogtjanst_HSA/Innehall/hsa_innehall_befattning.pdf 
                healthcareProfessionalCareUnitHSAid: 
                HSA-id för PDL-enhet som vård- och omsorgspersonen är uppdragstagare för
                healthcareProfessionalCareGiverHSAid: 
                HSA-id för vårdgivaren, som är vårdgivare för den enhet som författaren är uppdragstagare för</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="authorTime" type="tns:TimeStampType"/>
      <xs:element name="healthcareProfessionalHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalName" type="xs:string" minOccurs="0"/>
      <xs:element name="healthcareProfessionalRoleCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalOrgUnit" type="tns:OrgUnitType" minOccurs="0"/>
      <xs:element name="healthcareProfessionalCareUnitHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element minOccurs="0" name="healthcareProfessionalCareGiverHSAId" type="tns:HSAIdType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="OrgUnitType">
    <xs:annotation>
      <xs:documentation>Information om en organisationsenhet
                
                orgUnitHsaId: 
                HSA-id för organisationsenhet
                orgUnitName
                Namn på organisationsenhet
                orgUnitTelecom: 
                Telefon till organisationsenhet
                orgUnitEmail: 
                Epost till enhet
                orgUnitAddress: 
                Postadress till enhet
                orgUnitLocation: 
                Text som anger namnet på plats eller ort för enhetens eller funktionens fysiska placering</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="orgUnitHSAId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="orgUnitName" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitTelecom" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitEmail" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitAddress" type="xs:string" minOccurs="0"/>
      <xs:element name="orgUnitLocation" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="CVType">
    <xs:annotation>
      <xs:documentation/>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="code" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystem" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystemName" type="xs:string" minOccurs="0"/>
      <xs:element name="codeSystemVersion" type="xs:string" minOccurs="0"/>
      <xs:element name="displayName" type="xs:string" minOccurs="0"/>
      <xs:element name="originalText" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="IIType">
    <xs:sequence>
      <xs:element name="root" type="xs:string"/>
      <xs:element name="extension" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ActorType">
    <xs:sequence>
      <xs:element name="hsaId" type="tns:HSAIdType" minOccurs="0"/>
      <xs:element name="name" type="xs:string" minOccurs="0"/>
      <xs:element name="personTelecom" type="xs:string" minOccurs="0"/>
      <xs:element name="personEmail" type="xs:string" minOccurs="0"/>
      <xs:element name="personAddress" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AnalysisType">
    <xs:sequence>
      <xs:element name="analysisId" type="tns:IIType" minOccurs="1"/>
      <xs:element name="analysisTime" type="tns:TimePeriodType" minOccurs="0"/>
      <xs:element name="analysisCode" type="tns:CVType" minOccurs="0"/>
      <xs:element name="analysisText" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="analysisStatus" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="analysisComment" type="xs:string" minOccurs="0"/>
      <xs:element name="specimen" type="xs:string" minOccurs="0"/>
      <xs:element name="method" type="xs:string" minOccurs="0"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="relationToAnalysis" type="tns:RelationToAnalysisType"/>
      <xs:element name="analysisOutcome" type="tns:AnalysisOutcomeType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RelationToAnalysisType">
    <xs:sequence>
      <xs:element name="analysisId" type="tns:IIType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="AnalysisOutcomeType">
    <xs:sequence>
      <xs:element name="outcomeValue" type="xs:string"/>
      <xs:element name="outcomeUnit" type="xs:string" minOccurs="0"/>
      <xs:element name="observationTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="pathologicalFlag" type="xs:boolean"/>
      <xs:element name="outcomeDescription" type="xs:string" minOccurs="0"/>
      <xs:element name="referenceInterval" type="xs:string" minOccurs="0"/>
      <xs:element name="referencePopulation" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ECGOutcomeType">
    <xs:sequence>
      <xs:element name="ecgOutcomeHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="ecgOutcomeBody" type="tns:ECGOutcomeBodyType" minOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ImagingOutcomeType">
    <xs:sequence>
      <xs:element name="imagingOutcomeHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="imagingOutcomeBody" type="tns:ImagingBodyType" minOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ImagingBodyType">
    <xs:sequence>
      <xs:element minOccurs="0" name="examinationSpeciality" type="tns:CVType"/>
      <xs:element name="typeOfResult" type="codes:TypeOfResultCodeEnum"/>
      <xs:element name="resultTime" type="tns:TimeStampType" minOccurs="1"/>
      <xs:element name="resultReport" type="xs:string" minOccurs="1"/>
      <xs:element minOccurs="0" name="resultComment" type="xs:string"/>
      <xs:element maxOccurs="unbounded" name="radiationDose" type="tns:PQType" minOccurs="0"/>
      <xs:element name="patientData" type="tns:PatientDataType" minOccurs="0"/>
      <xs:element name="imageRecording" type="tns:ImageRecordingType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element minOccurs="0" name="referral" type="tns:ECGReferralType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ImageStructuredDataType">
    <xs:sequence>
      <xs:element name="aperture" type="tns:PQType" minOccurs="0"/>
      <xs:element name="exposureTime" type="tns:PQType" minOccurs="0"/>
      <xs:element name="imageCreationTime" type="tns:TimeStampType" minOccurs="0"/>
      <xs:element name="bodyPartExamined" type="tns:CVType" minOccurs="0"/>
      <xs:element name="contrastAgentUsed" type="xs:string" minOccurs="0"/>
      <xs:element name="magneticFieldStrength" type="tns:PQType" minOccurs="0"/>
      <xs:element name="copyright" type="xs:string" minOccurs="0"/>
      <xs:element name="imageData" type="tns:ImageDataType"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ECGOutcomeBodyType">
    <xs:sequence>
      <xs:element minOccurs="0" name="examinationSpeciality" type="tns:CVType"/>
      <xs:element name="typeOfResult" type="codes:TypeOfResultCodeEnum"/>
      <xs:element name="resultTime" type="tns:TimeStampType" minOccurs="1"/>
      <xs:element name="resultReport" type="xs:string" minOccurs="1"/>
      <xs:element minOccurs="0" name="resultComment" type="xs:string"/>
      <xs:element name="patientData" type="tns:PatientDataType" minOccurs="0"/>
      <xs:element name="ecgRecording" type="tns:ECGRecordingType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element minOccurs="0" name="referral" type="tns:ECGReferralType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ImageDataType">
    <xs:sequence>
      <xs:element name="mediaType" type="codes:MediaTypeEnum" minOccurs="1"/>
      <xs:element name="value" type="xs:base64Binary" minOccurs="0"/>
      <xs:element minOccurs="0" name="reference" type="xs:anyURI"/>
      <xs:element minOccurs="0" name="burnedInaAnnotations" type="xs:boolean"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PatientDataType">
    <xs:sequence>
      <xs:element name="patientWeight" type="tns:PQType" minOccurs="0"/>
      <xs:element name="patientLength" type="tns:PQType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ModalityDataType">
    <xs:sequence>
      <xs:element minOccurs="0" name="typeOfModality" type="xs:string"/>
      <xs:element name="manufacturer" type="xs:string" minOccurs="0"/>
      <xs:element name="modelName" type="xs:string" minOccurs="0"/>
      <xs:element name="equipmentId" type="xs:string" minOccurs="0"/>
      <xs:element minOccurs="0" name="softwareVersion" type="xs:string"/>
      <xs:element name="lineFilter" type="tns:PQType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ImageRecordingType">
    <xs:sequence>
      <xs:element name="recordingId" type="tns:IIType"/>
      <xs:element name="examinationActivity" type="tns:CVType" minOccurs="1"/>
      <xs:element name="examinationTimePeriod" type="tns:TimePeriodType" minOccurs="1"/>
      <xs:element name="examinationStatus" type="codes:ExaminationStatusCodeEnum" minOccurs="0"/>
      <xs:element name="examinationUnit" type="xs:string" minOccurs="0"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType" minOccurs="0"/>
      <xs:element minOccurs="0" name="numberOfImages" type="xs:int"/>
      <xs:element minOccurs="0" name="modalityData" type="tns:ModalityDataType"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="imageDicomData" type="tns:DicomDataType"/>
      <xs:element name="imageStructuredData" type="tns:ImageStructuredDataType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ECGRecordingType">
    <xs:sequence>
      <xs:element name="recordingId" type="tns:IIType"/>
      <xs:element name="examinationActivity" type="tns:CVType" minOccurs="1"/>
      <xs:element name="examinationTimePeriod" type="tns:TimePeriodType" minOccurs="1"/>
      <xs:element name="examinationStatus" type="tns:CVType" minOccurs="0"/>
      <xs:element name="examinationUnit" type="xs:string" minOccurs="0"/>
      <xs:element name="accountableHealthcareProfessional" type="tns:HealthcareProfessionalType" minOccurs="0"/>
      <xs:element minOccurs="0" name="modalityData" type="tns:ModalityDataType"/>
      <xs:element minOccurs="0" name="pacemaker" type="xs:boolean"/>
      <xs:element name="ecgStructuredData" type="tns:ECGStructuredDataType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="ecgDicomData" type="tns:DicomDataType"/>
      <xs:element maxOccurs="unbounded" minOccurs="0" name="ecgData" type="tns:ImageDataType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ECGStructuredDataType">
    <xs:sequence>
      <xs:element name="usedFilter" type="tns:UsedFilterType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="heartRate" type="tns:PQType" minOccurs="0"/>
      <xs:element name="qt" type="tns:PQType" minOccurs="0"/>
      <xs:element name="qtCorrected" type="tns:PQType" minOccurs="0"/>
      <xs:element name="pr" type="tns:PQType" minOccurs="0"/>
      <xs:element name="pAxis" type="tns:PQType" minOccurs="0"/>
      <xs:element name="qrsAxis" type="tns:PQType" minOccurs="0"/>
      <xs:element name="tAxis" type="tns:PQType" minOccurs="0"/>
      <xs:element name="st" type="tns:STType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="interpretationAlgorithmName" type="xs:string" minOccurs="0"/>
      <xs:element name="interpretation" type="xs:string" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="DicomDataType">
    <xs:sequence>
      <xs:element name="dicomSOP" type="xs:string"/>
      <xs:element name="dicomValue" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="dicomReference" type="xs:anyURI" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ECGStaticDataType">
    <xs:sequence>
      <xs:element name="mediaType" type="codes:MediaTypeEnum"/>
      <xs:element name="value" type="xs:base64Binary" minOccurs="0"/>
      <xs:element name="reference" type="xs:anyURI" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="STType">
    <xs:sequence>
      <xs:element name="leadName" type="xs:string"/>
      <xs:element name="stLevel" type="tns:PQType" minOccurs="1"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="UsedFilterType">
    <xs:sequence>
      <xs:element name="filterName" type="xs:string" minOccurs="0"/>
      <xs:element name="lowerFrequency" type="tns:PQType" minOccurs="0"/>
      <xs:element name="upperFrequency" type="tns:PQType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PostDeliveryRecordType">
    <xs:sequence>
      <xs:element name="motherPostDeliveryRecord" type="tns:MotherPostDeliveryRecordType"/>
      <xs:element name="childPostDeliveryRecord" type="tns:ChildPostDeliveryRecordType" minOccurs="1" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MotherPostDeliveryRecordType">
    <xs:sequence>
      <xs:element name="bloodPressureSystolic" type="tns:PQType" minOccurs="0"/>
      <xs:element name="bloodPressureDiastolic" type="tns:PQType" minOccurs="0"/>
      <xs:element name="haemoglobin" type="tns:PQType" minOccurs="0"/>
      <xs:element name="bodyTemperature" type="xs:decimal" minOccurs="0"/>
      <xs:element name="scarsOK" type="xs:boolean" minOccurs="0"/>
      <xs:element name="sutureRemoved" type="xs:boolean" minOccurs="0"/>
      <xs:element name="perineumComfortable" type="xs:boolean" minOccurs="0"/>
      <xs:element name="vulvaVaginaPortioOK" type="xs:boolean" minOccurs="0"/>
      <xs:element name="uterusContracted" type="xs:boolean" minOccurs="0"/>
      <xs:element name="uterusNote" type="xs:string" minOccurs="0"/>
      <xs:element name="breastfeeding" type="xs:boolean" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ChildPostDeliveryRecordType">
    <xs:sequence>
      <xs:element name="ordinalNumber" type="xs:int"/>
      <xs:element name="weight" type="tns:PQType" minOccurs="0"/>
      <xs:element name="apgarScore1" type="xs:int" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Apgar (0..10) efter 1 minut</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="apgarScore5" type="xs:int" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Apgar (0..10) efter 5 minut</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:element name="apgarScore10" type="xs:int" minOccurs="0">
        <xs:annotation>
          <xs:documentation>Apgar (0..10) efter 10 minut</xs:documentation>
        </xs:annotation>
      </xs:element>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LaboratoryOrderOutcomeType">
    <xs:sequence>
      <xs:element name="laboratoryOrderOutcomeHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="laboratoryOrderOutcomeBody" type="tns:LaboratoryOrderOutcomeBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="LaboratoryOrderOutcomeBodyType">
    <xs:sequence>
      <xs:element name="resultType" type="xs:string"/>
      <xs:element name="registrationTime" type="tns:TimeStampType"/>
      <xs:element name="discipline" type="xs:string"/>
      <xs:element name="resultReport" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="resultComment" type="xs:string" minOccurs="0" maxOccurs="1"/>
      <xs:element name="accountableHeathcareProfessional" type="tns:HealthcareProfessionalType" minOccurs="0"/>
      <xs:element name="analysis" type="tns:AnalysisType" maxOccurs="unbounded" minOccurs="0"/>
      <xs:element name="order" type="tns:OrderType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MaternityMedicalRecordType">
    <xs:sequence>
      <xs:element name="maternityMedicalRecordHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="maternityMedicalRecordBody" type="tns:MaternityMedicalRecordBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MaternityMedicalRecordBodyType">
    <xs:sequence>
      <xs:element name="registrationRecord" type="tns:RegistrationRecordType" minOccurs="0"/>
      <xs:element name="pregnancyCheckupRecord" type="tns:PregnancyCheckupRecordType" minOccurs="0"/>
      <xs:element name="postDeliveryRecord" type="tns:PostDeliveryRecordType" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="RegistrationRecordType">
    <xs:sequence>
      <xs:element name="lastMenstrualPeriod" type="tns:DateType" minOccurs="0"/>
      <xs:element name="indicationPregnancy" type="tns:DateType" minOccurs="0"/>
      <xs:element name="contraceptiveDiscontinued" type="tns:DateType" minOccurs="0"/>
      <xs:element name="expectedDayOfDeliveryFromLastMenstrualPeriod" type="tns:DateType" minOccurs="0"/>
      <xs:element name="expectedDayOfDeliveryFromUltrasoundScan" type="tns:DateType" minOccurs="0"/>
      <xs:element name="expectedDayOfDeliveryFromEmbryonicTransfer" type="tns:DateType" minOccurs="0"/>
      <xs:element minOccurs="0" name="length" type="tns:PQType"/>
      <xs:element name="weight" type="tns:PQType" minOccurs="0"/>
      <xs:element minOccurs="0" name="bodyMassIndex" type="tns:PQType"/>
      <xs:element name="infertility" type="xs:decimal" minOccurs="0"/>
      <xs:element name="previousGravidityAndParity" type="tns:PreviousGravidityAndParityType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="diseasesThrombosis" type="xs:boolean" minOccurs="0"/>
      <xs:element name="diseasesEndocineDiseases" type="xs:boolean" minOccurs="0"/>
      <xs:element name="diseasesRecurrentUrinaryTractInfections" type="xs:boolean" minOccurs="0"/>
      <xs:element name="diseasesDiabetesMellitus" type="xs:boolean" minOccurs="0"/>
      <xs:element name="medicationDuringPregnacy" type="tns:MedicationType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="assessmentAtFirstContactStandardCare" type="xs:boolean" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PreviousGravidityAndParityType">
    <xs:sequence>
      <xs:element name="year" type="xs:int"/>
      <xs:element name="month" type="xs:int"/>
      <xs:element name="delivery" type="codes:DeliveryCodeEnum" minOccurs="0"/>
      <xs:element name="healthcareFacility" type="xs:string" minOccurs="0"/>
      <xs:element name="progress" type="xs:string" minOccurs="0"/>
      <xs:element minOccurs="0" name="sex" type="codes:SexCodeEnum"/>
      <xs:element name="weightOfChild" type="tns:PQType" minOccurs="0"/>
      <xs:element name="gestation" type="xs:int" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="MedicationType">
    <xs:sequence>
      <xs:element name="medicament" type="xs:string"/>
      <xs:element name="dosage" type="xs:string" minOccurs="0"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="PregnancyCheckupRecordType">
    <xs:sequence>
      <xs:element name="completeWeeksOfGestation" type="xs:int" minOccurs="0"/>
      <xs:element name="weight" type="tns:PQType" minOccurs="0"/>
      <xs:element name="symphysisFundalHeight" type="tns:PQType" minOccurs="0"/>
      <xs:element name="haemoglobin" type="tns:PQType" minOccurs="0"/>
      <xs:element name="bloodPressureSystolic" type="tns:PQType" minOccurs="0"/>
      <xs:element name="bloodPressureDiastolic" type="tns:PQType" minOccurs="0"/>
      <xs:element minOccurs="0" name="plasmaGlucose" type="tns:MeasurementType"/>
      <xs:element minOccurs="0" name="proteinuria" type="tns:PQType"/>
      <xs:element minOccurs="0" name="glycosuria" type="tns:PQType"/>
      <xs:element name="fetalPosition" type="codes:FetalPositionCodeEnum" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="fetalPresentation" type="codes:FetalPresentationCodeEnum" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="fetalHeartRate" type="tns:PQType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="typeOfLeave" type="codes:TypeOfLeaveCodeEnum" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="medicationSinceRegistration" type="tns:MedicationType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ReferralOutcomeType">
    <xs:sequence>
      <xs:element name="referralOutcomeHeader" type="tns:PatientSummaryHeaderType"/>
      <xs:element name="referralOutcomeBody" type="tns:ReferralOutcomeBodyType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ReferralOutcomeBodyType">
    <xs:sequence>
      <xs:element name="referralOutcomeTypeCode" type="codes:ReferralOutcomeTypeCodeEnum"/>
      <xs:element name="referralOutcomeTitle" type="xs:string"/>
      <xs:element name="referralOutcomeText" type="xs:string"/>
      <xs:element name="clinicalInformation" type="tns:ClinicalInformationType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="act" type="tns:ActType" minOccurs="0" maxOccurs="unbounded"/>
      <xs:element name="referral" type="tns:ReferralType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ClinicalInformationType">
    <xs:sequence>
      <xs:element name="clinicalInformationCode" type="tns:ClinicalInformationCodeType"/>
      <xs:element name="clinicalInformationText" type="xs:string"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:complexType name="ClinicalInformationCodeType">
    <xs:sequence>
      <xs:element name="code" type="xs:string"/>
      <xs:element name="codeSystem" type="tns:ClinicalInformationCodeCodeSystemType"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
  <xs:simpleType name="ClinicalInformationCodeCodeSystemType">
    <xs:restriction base="xs:string">
      <xs:enumeration value="1.2.752.116.1.1.1.1.3"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/khaleddaham/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/actoutcome/trunk/schemas/core_components/clinicalprocess_healthcond_actoutcome_enum_3.0.xsd</con:url><con:content><![CDATA[<!--Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements. See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership. Sveriges Kommuner och Landsting licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License. You may obtain a copy of the License at
 
 http://www.apache.org/licenses/LICENSE-2.0
 
 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied. See the License for the
 specific language governing permissions and limitations
 under the License.-->
<xs:schema targetNamespace="urn:riv:clinicalprocess:healthcond:actoutcome:enums:3" elementFormDefault="qualified" attributeFormDefault="unqualified" version="3.0" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:tns="urn:riv:clinicalprocess:healthcond:actoutcome:enums:3">
  <xs:simpleType name="MediaTypeEnum">
    <xs:union memberTypes="tns:ApplicationMediaEnum tns:AudioMediaTypeEnum tns:ImageMediaTypeEnum tns:ModelMediaTypeEnum tns:MultipartMediaTypeEnum tns:TextMediaTypeEnum tns:VideoMediaTypeEnum"/>
  </xs:simpleType>
  <xs:simpleType name="ApplicationMediaEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="application/dicom"/>
      <xs:enumeration value="application/msword"/>
      <xs:enumeration value="application/pdf"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="AudioMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="audio/basic"/>
      <xs:enumeration value="audio/k32adpcm"/>
      <xs:enumeration value="audio/mpeg"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="DeliveryCodeEnum">
    <xs:restriction base="xs:integer">
      <xs:enumeration value="0">
        <xs:annotation>
          <xs:documentation>Ej angivet</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="1">
        <xs:annotation>
          <xs:documentation>X-gravid</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="2">
        <xs:annotation>
          <xs:documentation>Spontan abort</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="4">
        <xs:annotation>
          <xs:documentation>Dödfött</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="5">
        <xs:annotation>
          <xs:documentation>Levande fött</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FetalPositionCodeEnum">
    <xs:restriction base="xs:integer">
      <xs:enumeration value="0">
        <xs:annotation>
          <xs:documentation>huvud</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="1">
        <xs:annotation>
          <xs:documentation>säte</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="2">
        <xs:annotation>
          <xs:documentation>snedläge</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="3">
        <xs:annotation>
          <xs:documentation>tvärläge</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="FetalPresentationCodeEnum">
    <xs:restriction base="xs:integer">
      <xs:enumeration value="0">
        <xs:annotation>
          <xs:documentation>Huvud</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="1">
        <xs:annotation>
          <xs:documentation>Säte</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="2">
        <xs:annotation>
          <xs:documentation>snedläge</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="3">
        <xs:annotation>
          <xs:documentation>tvärläge</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ImageMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="image/g3fax"/>
      <xs:enumeration value="image/gif"/>
      <xs:enumeration value="image/jpeg"/>
      <xs:enumeration value="image/png"/>
      <xs:enumeration value="image/tiff"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ModelMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="model/vrml"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="MultipartMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="multipart/x-hl7-cda-level1"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ReferralOutcomeTypeCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="SS">
        <xs:annotation>
          <xs:documentation>Slutsvar på remissfråga</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="SR">
        <xs:annotation>
          <xs:documentation>Svar på remissfråga</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ExaminationStatusCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="Initierad">
        <xs:annotation>
          <xs:documentation>Initierad</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Planerad">
        <xs:annotation>
          <xs:documentation>Planerad (bevakad)</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Tidbokad">
        <xs:annotation>
          <xs:documentation>Tidbokad</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Uppskjuten">
        <xs:annotation>
          <xs:documentation>Uppskjuten</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Annullerad">
        <xs:annotation>
          <xs:documentation>Annullerad</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Pågående">
        <xs:annotation>
          <xs:documentation>Pågående</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Avvakta">
        <xs:annotation>
          <xs:documentation>Avvakta</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Avbruten">
        <xs:annotation>
          <xs:documentation>Avbruten</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Avklarad">
        <xs:annotation>
          <xs:documentation>Avklarad</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Inaktuell">
        <xs:annotation>
          <xs:documentation>Inaktuell</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="Makulerad">
        <xs:annotation>
          <xs:documentation>Makulerad</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TypeOfResultCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="PREL">
        <xs:annotation>
          <xs:documentation>Preliminärsvar</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="DEF">
        <xs:annotation>
          <xs:documentation>Definitivsvar</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="TILL">
        <xs:annotation>
          <xs:documentation>Tilläggssvar</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="SexCodeEnum">
    <xs:restriction base="xs:int">
      <xs:enumeration value="0">
        <xs:annotation>
          <xs:documentation>okänt</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="1">
        <xs:annotation>
          <xs:documentation>man</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="2">
        <xs:annotation>
          <xs:documentation>kvinna</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="9">
        <xs:annotation>
          <xs:documentation>ej tillämpligt</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TextMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="text/html"/>
      <xs:enumeration value="text/plain"/>
      <xs:enumeration value="text/rtf"/>
      <xs:enumeration value="text/sgml"/>
      <xs:enumeration value="text/x-hl7-ft"/>
      <xs:enumeration value="text/xml"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="TypeOfLeaveCodeEnum">
    <xs:restriction base="xs:integer">
      <xs:enumeration value="0">
        <xs:annotation>
          <xs:documentation>Sjukskrivning</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="1">
        <xs:annotation>
          <xs:documentation>Havandekapsledighet</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
      <xs:enumeration value="2">
        <xs:annotation>
          <xs:documentation>Föräldrarledighet</xs:documentation>
        </xs:annotation>
      </xs:enumeration>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="VideoMediaTypeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="video/mpeg"/>
      <xs:enumeration value="video/x-avi"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ResultCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="OK"/>
      <xs:enumeration value="ERROR"/>
      <xs:enumeration value="INFO"/>
    </xs:restriction>
  </xs:simpleType>
  <xs:simpleType name="ErrorCodeEnum">
    <xs:restriction base="xs:string">
      <xs:enumeration value="INVALID_REQUEST"/>
      <xs:enumeration value="TRANSFORMATION_ERROR"/>
      <xs:enumeration value="APPLICATION_ERROR"/>
      <xs:enumeration value="TECHNICAL_ERROR"/>
    </xs:restriction>
  </xs:simpleType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part><con:part><con:url>file:/Users/khaleddaham/NetBeansProjects/rivta/ServiceInteractions/riv/clinicalprocess/healthcond/actoutcome/trunk/schemas/core_components/itintegration_registry_1.0.xsd</con:url><con:content><![CDATA[<xs:schema targetNamespace="urn:riv:itintegration:registry:1" elementFormDefault="qualified" version="1.0" xmlns="urn:riv:itintegration:registry:1" xmlns:xs="http://www.w3.org/2001/XMLSchema">
  <xs:annotation>
    <xs:documentation>Beskrivning: 	Grundläggande informationsobjekt för domänen itintegration:registry (adressering av tjänster)
			
			Revisionshistorik: 2011-06-27 Mats Ekhammar, Callista Enterprise AB
				Added ServiceContractType
			
			Datum:			2011-05-04
			Beskrivning:	Initial version
			Författare:		marcus.krantz@callistaenterprise.se</xs:documentation>
  </xs:annotation>
  <xs:element name="LogicalAddress" type="LogicalAddressType"/>
  <xs:element name="ServiceContract" type="ServiceContractType"/>
  <xs:simpleType name="LogicalAddressType">
    <xs:annotation>
      <xs:documentation>Defines the type for logical address according to national reference architecture.
				Superseeds wsa:To as type for logical address header in RIVTA 2.1.</xs:documentation>
    </xs:annotation>
    <xs:restriction base="xs:string"/>
  </xs:simpleType>
  <xs:complexType name="ServiceContractType">
    <xs:annotation>
      <xs:documentation>Type which describes a service contract. Used in interaction GetSupportedServiceContracts.</xs:documentation>
    </xs:annotation>
    <xs:sequence>
      <xs:element name="ServiceContractNamespace" type="xs:anyURI"/>
      <xs:any namespace="##other" processContents="lax" minOccurs="0" maxOccurs="unbounded"/>
    </xs:sequence>
  </xs:complexType>
</xs:schema>]]></con:content><con:type>http://www.w3.org/2001/XMLSchema</con:type></con:part></con:definitionCache><con:endpoints><con:endpoint>${webServiceUrl}</con:endpoint><con:endpoint>http://tempuri.org</con:endpoint></con:endpoints><con:operation isOneWay="false" action="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3:GetLaboratoryOrderOutcome" name="GetLaboratoryOrderOutcome" bindingOperationName="GetLaboratoryOrderOutcome" type="Request-Response" inputName="" receivesAttachments="false" sendsAttachments="false" anonymous="optional"><con:settings/><con:call name="Request 1"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:2">
   <soapenv:Header>
      <urn:LogicalAddress>?</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetLaboratoryOrderOutcome>
         <!--Zero or more repetitions:-->
         <urn1:careUnitHSAid>?</urn1:careUnitHSAid>
         <urn1:patientId>
            <urn2:id>?</urn2:id>
            <urn2:type>?</urn2:type>
            <!--You may enter ANY elements at this point-->
         </urn1:patientId>
         <!--Optional:-->
         <urn1:timePeriod>
            <urn2:start>?</urn2:start>
            <urn2:end>?</urn2:end>
            <!--You may enter ANY elements at this point-->
         </urn1:timePeriod>
         <!--Optional:-->
         <urn1:sourceSystemHSAId>?</urn1:sourceSystemHSAId>
         <!--Zero or more repetitions:-->
         <urn1:careContactId>?</urn1:careContactId>
         <!--You may enter ANY elements at this point-->
      </urn1:GetLaboratoryOrderOutcome>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:2:GetLaboratoryOrderOutcome"/><con:wsrmConfig version="1.2"/></con:call><con:call name="Request 2"><con:settings/><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:2" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:2">
   <soapenv:Header>
      <urn:LogicalAddress>?</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetLaboratoryOrderOutcome>
         <!--Zero or more repetitions:-->
         <urn1:careUnitHSAId>?</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>?</urn2:id>
            <urn2:type>?</urn2:type>
            <!--You may enter ANY elements at this point-->
         </urn1:patientId>
         <!--Optional:-->
         <urn1:timePeriod>
            <urn2:start>?</urn2:start>
            <urn2:end>?</urn2:end>
            <!--You may enter ANY elements at this point-->
         </urn1:timePeriod>
         <!--Optional:-->
         <urn1:sourceSystemHSAId>?</urn1:sourceSystemHSAId>
         <!--Zero or more repetitions:-->
         <urn1:careContactId>?</urn1:careContactId>
         <!--You may enter ANY elements at this point-->
      </urn1:GetLaboratoryOrderOutcome>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:credentials><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508" action="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:2:GetLaboratoryOrderOutcome"/><con:wsrmConfig version="1.2"/></con:call></con:operation></con:interface><con:testSuite name="GetLaboratoryOrderOutcome TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="BasicTestcase" searchProperties="true" id="f1ad5eae-ccd5-40ae-a2ec-0728be0093a4"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("BasicTestcase")

//context.each {key, value ->log.debug("$key = $value")} </script></con:config></con:testStep><con:testStep type="request" name="Call GetLaboratoryOrderOutcome"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetLaboratoryOrderOutcomeResponderBinding</con:interface><con:operation>GetLaboratoryOrderOutcome</con:operation><con:request name="Call GetLaboratoryOrderOutcome"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="BasicResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetLaboratoryOrderOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
          </urn1:patientId>
      </urn1:GetLaboratoryOrderOutcome>
      </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="GroovyScriptAssertion" name="PatientId"><con:configuration><scriptText>import static com.eviware.soapui.support.StringUtils.hasContent
import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:3'

def laboratoryOrderOutcome = holder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetLaboratoryOrderOutcomeResponse/urn:laboratoryOrderOutcome')

assert laboratoryOrderOutcome.size() > 0

laboratoryOrderOutcome.each {l ->
    def labHolder = new XmlHolder( l )
    holder.namespaces.each {key, value -> labHolder.namespaces[key] = value}

    def patientId = labHolder.getNodeValue('/urn:laboratoryOrderOutcome/urn1:laboratoryOrderOutcomeHeader/urn1:patientId/urn1:id')
    def patientIdType = labHolder.getNodeValue('/urn:laboratoryOrderOutcome/urn1:laboratoryOrderOutcomeHeader/urn1:patientId/urn1:type')

    assert patientId == context.patientId
    assert patientIdType == context.patientIdType
}
</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AssertSchematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def failures = validator.validateMessage(messageExchange.response.getResponseContent(),
        new File(utils.projectPath + "/constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DateBoundaries" searchProperties="true" id="26a22344-c2db-4321-ba22-2fae2ed8af73" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("DateBoundaries")</script></con:config></con:testStep><con:testStep type="request" name="Call GetLaboratoryOrderOutcome"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetLaboratoryOrderOutcomeResponderBinding</con:interface><con:operation>GetLaboratoryOrderOutcome</con:operation><con:request name="Call GetLaboratoryOrderOutcome"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="DateBoundariesResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetLaboratoryOrderOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:timePeriod>
            <urn2:start>${timePeriodStart}</urn2:start>
            <urn2:end>${timePeriodEnd}</urn2:end>
         </urn1:timePeriod>
      </urn1:GetLaboratoryOrderOutcome>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Response SLA Assertion" name="Response SLA"><con:configuration><SLA>15000</SLA></con:configuration></con:assertion><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="SOAP Response" name="SOAP Response"/><con:assertion type="GroovyScriptAssertion" name="Assert Schematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def failures = validator.validateMessage(messageExchange.response.getResponseContent(),
        new File(utils.projectPath + "/constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert DateBoundaries"><con:configuration><scriptText><![CDATA[import static com.eviware.soapui.support.StringUtils.hasContent
import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:3'

def laboratoryOrderOutcome = holder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetLaboratoryOrderOutcomeResponse/urn:laboratoryOrderOutcome')

log.debug("Starting date limits step with, timePeriodStart: $context.timePeriodStart, timePeriodEnd: $context.timePeriodEnd")

//context.each {key, value -> log.debug("$key = $value")}

def offending = []

assert laboratoryOrderOutcome.size() != 0

laboratoryOrderOutcome.each {l ->
    def labHolder = new XmlHolder( l )
    holder.namespaces.each {key, value -> labHolder.namespaces[key] = value}

    def documentId = labHolder.getNodeValue('/urn:laboratoryOrderOutcome/urn1:laboratoryOrderOutcomeHeader/urn1:documentId')
    def documentTime = labHolder.getNodeValue('/urn:laboratoryOrderOutcome/urn1:laboratoryOrderOutcomeHeader/urn1:documentTime')
    documentTime = documentTime == null ? null : documentTime.substring(0,8)

    def analysis = labHolder.getDomNodes('/urn:laboratoryOrderOutcome/urn1:laboratoryOrderOutcomeBody/urn1:analysis')
    def useDocumentTime = true
    def correct = false

    log.debug ("Found a response with documentId = $documentId and documentTime = $documentTime")

    for(a in analysis) {
        def analysisHolder = new XmlHolder( a )
        holder.namespaces.each {key, value -> analysisHolder.namespaces[key] = value}
        def analysisTimeStart = analysisHolder.getNodeValue('/urn1:analysis/urn1:analysisTime/urn1:start')
        def analysisTimeEnd = analysisHolder.getNodeValue('/urn1:analysis/urn1:analysisTime/urn1:end')
        def analysisId = analysisHolder.getNodeValue('/urn1:analysis/urn1:analysisId/urn1:root')

        analysisTimeStart = analysisTimeStart == null ? null : analysisTimeStart.substring(0, 8)
        analysisTimeEnd = analysisTimeEnd == null ? null : analysisTimeEnd.substring(0, 8)

        if (analysisTimeStart == null && analysisTimeEnd == null) {
            log.debug ("Found an analysis result with analysisId = $analysisId without analysis time")
            useDocumentTime = true
            correct = true
            return true
        }

         if (analysisTimeStart != null && analysisTimeEnd == null) {
            log.debug ("Found an analysis result analysisId = $analysisId with only analysis time start: $analysisTimeStart")

            useDocumentTime = false
            if(analysisTimeStart >= context.timePeriodStart && analysisTimeStart <= context.timePeriodEnd)  {
                correct = true
                return true
            }
        }

        if (analysisTimeStart == null && analysisTimeEnd != null) {
            log.debug ("Found an analysis result analysisId = $analysisId with only analysis time end: $analysisTimeEnd")

            useDocumentTime = false
            if(analysisTimeEnd >= context.timePeriodStart && analysisTimeEnd <= context.timePeriodEnd)  {
                correct = true
                return true
            }
        }

        if (analysisTimeStart != null && analysisTimeEnd != null) {
            log.debug ("Found an analysis result analysisId = $analysisId with analysis time start: $analysisTimeStart and end: $analysisTimeEnd")

            useDocumentTime = false
            if((analysisTimeStart <= context.timePeriodStart && analysisTimeEnd >= context.timePeriodStart) ||
                    (analysisTimeEnd >= context.timePeriodEnd && analysisTimeStart <= context.timePeriodEnd) ||
                    (analysisTimeStart >= context.timePeriodStart && analysisTimeEnd <= context.timePeriodEnd)) {
                correct = true
                return true
            }
        }
    }
    if(useDocumentTime) {
        correct = documentTime >= context.timePeriodStart && documentTime <= context.timePeriodEnd
    }

    if(!correct) {
        offending.add(documentId)
    }
}
if(!offending.isEmpty()) {
    log.error("DocumentIds $offending do not contain dates within the specified interval")
    assert(false)
}]]></scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert documentIds"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:3'

def documentIds = holder.getNodeValues('/soapenv:Envelope/soapenv:Body/urn:GetLaboratoryOrderOutcomeResponse/urn:laboratoryOrderOutcome/urn1:laboratoryOrderOutcomeHeader/urn1:documentId') as List

def expectedDocumentIds = context.expectedDocumentIds ? context.expectedDocumentIds.tokenize(',') : []
def unexpectedDocumentIds = context.unexpectedDocumentIds ? context.unexpectedDocumentIds.tokenize(',') : []

log.debug("Assert documentIds, unexpectedDocumentIds:$unexpectedDocumentIds,\nexpectedDocumentIds, $expectedDocumentIds,\nfound documentIds $documentIds")

def missingExpectedIds = []
def extraUnexpectedIds= []

documentIds.each {id ->
    if (unexpectedDocumentIds.contains(id)) {
        extraUnexpectedIds.add(id)
    }
}

expectedDocumentIds.each {id ->
    if (!documentIds.contains(id)) {
        missingExpectedIds.add(id)
    }
}

if(!missingExpectedIds.isEmpty() || !extraUnexpectedIds.isEmpty()) {
    log.error("Response contains unexpected DocumentIds: $extraUnexpectedIds and/or does not contain  expected DocumentIds: $missingExpectedIds")
    assert(false)
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:ehr:patientsummary:GetCareContactsResponder:2:GetCareContacts" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>74fd6c8e-e3f8-4fb1-b45f-90a4ad24c35b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CareContactIdFilter" searchProperties="true" id="fc422148-89c7-45dd-8553-9b86c7d567b4" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword=""><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("CareContactIdFilter")
</script></con:config></con:testStep><con:testStep type="request" name="CallWithCareContactId"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetLaboratoryOrderOutcomeResponderBinding</con:interface><con:operation>GetLaboratoryOrderOutcome</con:operation><con:request name="CallWithCareContactId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareContactIdFilterResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetLaboratoryOrderOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
          </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId1}</urn1:careContactId>
         <urn1:careContactId>${careContactId2}</urn1:careContactId>
      </urn1:GetLaboratoryOrderOutcome>
      </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="GroovyScriptAssertion" name="AssertSchematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def failures = validator.validateMessage(messageExchange.response.getResponseContent(),
        new File(utils.projectPath + "/constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AssertSingleCareContact"><con:configuration><scriptText>import static com.eviware.soapui.support.StringUtils.hasContent
import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def responseHolder = new XmlHolder( messageExchange.response.responseContent )
responseHolder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
responseHolder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3'
responseHolder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:3'

def requestHolder =  new XmlHolder( messageExchange.request.requestContent )
requestHolder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
requestHolder.namespaces['urn'] = 'urn:riv:itintegration:registry:1'
requestHolder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3'
requestHolder.namespaces['urn2'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:3'

// This is so stupid, I get ${sourceSystemHSAId}, not the actual value
def requestSourceSystemHSAId = requestHolder.getNodeValue('/soapenv:Envelope/soapenv:Body/urn1:GetLaboratoryOrderOutcome/urn1:sourceSystemHSAId')
def requestCareContactId = requestHolder.getNodeValue('/soapenv:Envelope/soapenv:Body/urn1:GetLaboratoryOrderOutcome/urn1:careContactId[1]')
log.debug("requestSourceSystemHSAId: $requestSourceSystemHSAId")
log.debug("requestCareContactId: $requestCareContactId")

def laboratoryOrderOutcome = responseHolder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetLaboratoryOrderOutcomeResponse/urn:laboratoryOrderOutcome')

assert laboratoryOrderOutcome.size() != 0

laboratoryOrderOutcome.each {l ->
    def labHolder = new XmlHolder( l )
    responseHolder.namespaces.each {key, value -> labHolder.namespaces[key] = value}

    def sourceSystemHSAId = labHolder.getNodeValue('/urn:laboratoryOrderOutcome/urn1:laboratoryOrderOutcomeHeader/urn1:sourceSystemHSAId')
    def careContactId = labHolder.getNodeValue('/urn:laboratoryOrderOutcome/urn1:laboratoryOrderOutcomeHeader/urn1:careContactId')

    assert sourceSystemHSAId == context.sourceSystemHSAId
    if(requestCareContactId != null) {
    	log.debug("asserting CareContactId")
        assert careContactId == context.careContactId1 || careContactId == context.careContactId2
    }
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="request" name="CallWithoutCareContactId"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetLaboratoryOrderOutcomeResponderBinding</con:interface><con:operation>GetLaboratoryOrderOutcome</con:operation><con:request name="CallWithoutCareContactId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareContactIdFilterResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetLaboratoryOrderOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
          </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
      </urn1:GetLaboratoryOrderOutcome>
      </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="GroovyScriptAssertion" name="AssertSchematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def failures = validator.validateMessage(messageExchange.response.getResponseContent(),
        new File(utils.projectPath + "/constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AssertSingleCareContact"><con:configuration><scriptText>import static com.eviware.soapui.support.StringUtils.hasContent
import com.eviware.soapui.support.XmlHolder
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)

def responseHolder = new XmlHolder( messageExchange.response.responseContent )
responseHolder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
responseHolder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3'
responseHolder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:3'

def requestHolder =  new XmlHolder( messageExchange.request.requestContent )
requestHolder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
requestHolder.namespaces['urn'] = 'urn:riv:itintegration:registry:1'
requestHolder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3'
requestHolder.namespaces['urn2'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:3'

// This is so stupid, I get ${sourceSystemHSAId}, not the actual value
def requestSourceSystemHSAId = requestHolder.getNodeValue('/soapenv:Envelope/soapenv:Body/urn1:GetLaboratoryOrderOutcome/urn1:sourceSystemHSAId')
def requestCareContactId = requestHolder.getNodeValue('/soapenv:Envelope/soapenv:Body/urn1:GetLaboratoryOrderOutcome/urn1:careContactId[1]')
log.debug("requestSourceSystemHSAId: $requestSourceSystemHSAId")
log.debug("requestCareContactId: $requestCareContactId")

def laboratoryOrderOutcome = responseHolder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetLaboratoryOrderOutcomeResponse/urn:laboratoryOrderOutcome')

assert laboratoryOrderOutcome.size() != 0

laboratoryOrderOutcome.each {l ->
    def labHolder = new XmlHolder( l )
    responseHolder.namespaces.each {key, value -> labHolder.namespaces[key] = value}

    def sourceSystemHSAId = labHolder.getNodeValue('/urn:laboratoryOrderOutcome/urn1:laboratoryOrderOutcomeHeader/urn1:sourceSystemHSAId')
    def careContactId = labHolder.getNodeValue('/urn:laboratoryOrderOutcome/urn1:laboratoryOrderOutcomeHeader/urn1:careContactId')

    assert sourceSystemHSAId == context.sourceSystemHSAId
    if(requestCareContactId != null) {
        assert careContactId == context.careContactId1 || careContactId == context.careContactId2
    }
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CareUnitIdFilter" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="d936d127-308e-4288-92dd-6dd986f85fdb"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("CareUnitIdFilter")
</script></con:config></con:testStep><con:testStep type="request" name="Call GetLaboratoryorderOutcome"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetLaboratoryOrderOutcomeResponderBinding</con:interface><con:operation>GetLaboratoryOrderOutcome</con:operation><con:request name="Call GetLaboratoryorderOutcome"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="CareUnitIdFilterResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetLaboratoryOrderOutcome>
         <urn1:careUnitHSAId>${careUnitId1}</urn1:careUnitHSAId>
         <urn1:careUnitHSAId>${careUnitId2}</urn1:careUnitHSAId>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
          </urn1:patientId>
      </urn1:GetLaboratoryOrderOutcome>
      </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="GroovyScriptAssertion" name="AssertSchematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def failures = validator.validateMessage(messageExchange.response.getResponseContent(),
        new File(utils.projectPath + "/constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="Assert CatreUnitId"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder

def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:3'

def labs = holder.getDomNodes('/soapenv:Envelope/soapenv:Body/urn:GetLaboratoryOrderOutcomeResponse/urn:laboratoryOrderOutcome')

if (labs.length == 0) {
    log.error("Your testdata is incorrect, response contains no laboratory order outcome.")
    assert(false)
}

def offending = []

labs.each { lab ->
    def labHolder = new XmlHolder( lab )
    holder.namespaces.each {key, value -> labHolder.namespaces[key] = value}


    def documentId = labHolder.getNodeValue('/urn:laboratoryOrderOutcome/urn1:laboratoryOrderOutcomeHeader/urn1:documentId')
    def careUnitHSAId = labHolder.getNodeValue('/urn:laboratoryOrderOutcome/urn1:laboratoryOrderOutcomeHeader/urn1:accountableHealthcareProfessional/urn1:healthcareProfessionalCareUnitHSAId')

    if (careUnitHSAId != context.careUnitId1 &amp;&amp; careUnitHSAId != context.careUnitId2) {
        offending.add("&lt;documentId: ${documentId} careUnitHSAId: ${careUnitHSAId}>")
    }
}

if(!offending.isEmpty()) {
    log.error("Response contains laboratoryOrderOutcome with unexpected CareUnitHSAId: ${offending}")
    assert(false)
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NonExistentPatientId" searchProperties="true" id="dd24d1b8-ab8f-4134-9fe7-1d71984f756f"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("NonExistentPatientId")

//context.each {key, value ->log.debug("$key = $value")} </script></con:config></con:testStep><con:testStep type="request" name="Call GetLaboratoryOrderOutcome"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetLaboratoryOrderOutcomeResponderBinding</con:interface><con:operation>GetLaboratoryOrderOutcome</con:operation><con:request name="Call GetLaboratoryOrderOutcome"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="EmptyResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetLaboratoryOrderOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
          </urn1:patientId>
      </urn1:GetLaboratoryOrderOutcome>
      </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="GroovyScriptAssertion" name="AssertSchematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def failures = validator.validateMessage(messageExchange.response.getResponseContent(),
        new File(utils.projectPath + "/constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3';
declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetLaboratoryOrderOutcomeResponse</path><content><![CDATA[<urn:GetLaboratoryOrderOutcomeResponse xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:3">
  <urn:result>
    <urn1:resultCode>OK</urn1:resultCode>
    <urn1:logId>0000-1111</urn1:logId>
  </urn:result>
</urn:GetLaboratoryOrderOutcomeResponse>]]></content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>true</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="NonExistentCareContactId" searchProperties="true" id="58dcadd9-8228-4dc5-96bd-74e805e6b648"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("NonExistentCareContactId")

//context.each {key, value ->log.debug("$key = $value")} </script></con:config></con:testStep><con:testStep type="request" name="Call GetLaboratoryOrderOutcome"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetLaboratoryOrderOutcomeResponderBinding</con:interface><con:operation>GetLaboratoryOrderOutcome</con:operation><con:request name="Call GetLaboratoryOrderOutcome"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="EmptyResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetLaboratoryOrderOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetLaboratoryOrderOutcome>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion"/><con:assertion type="GroovyScriptAssertion" name="AssertSchematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def failures = validator.validateMessage(messageExchange.response.getResponseContent(),
        new File(utils.projectPath + "/constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:2';
declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:2';
count(//urn:GetLaboratoryOrderOutcomeResponse/laboratoryOrderOutcome) = 0</path><content>true</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>true</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="HttpHeaderFilter" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" id="fc77dfca-9389-4c70-a673-a572bff77420"><con:settings/><con:testStep type="groovy" name="Read data"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("HttpHeaderFilter")</script></con:config></con:testStep><con:testStep type="request" name="Call GetLaboratoryOrderOutcome"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetLaboratoryOrderOutcomeResponderBinding</con:interface><con:operation>GetLaboratoryOrderOutcome</con:operation><con:request name="Call GetLaboratoryOrderOutcome"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="HttpHeaderFilterResponse"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetLaboratoryOrderOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
         </urn1:patientId>
      </urn1:GetLaboratoryOrderOutcome>
   </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:assertion type="Response SLA Assertion" name="Response SLA"><con:configuration><SLA>15000</SLA></con:configuration></con:assertion><con:assertion type="Schema Compliance" name="Schema Compliance"><con:configuration><definition/></con:configuration></con:assertion><con:assertion type="SOAP Response" name="SOAP Response"/><con:assertion type="GroovyScriptAssertion" name="Assert Schematron"><con:configuration><scriptText>import se.skl.rivta.testsupport.soapui.validation.SchematronValidator
import se.skl.rivta.testsupport.soapui.ContextHelper
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def contextHelper = new ContextHelper(context)
def validator = new SchematronValidator()

def failures = validator.validateMessage(messageExchange.response.getResponseContent(),
        new File(utils.projectPath + "/constraints.xml"))

failures.each { failure ->
    log.error ("Failure $failure.text")
}

assert (failures.isEmpty())</scriptText></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" name="AssertFiltering"><con:configuration><scriptText>import com.eviware.soapui.support.XmlHolder
def holder = new XmlHolder( messageExchange.response.responseContent )
holder.namespaces['soapenv'] = 'http://schemas.xmlsoap.org/soap/envelope/'
holder.namespaces['urn'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3'
holder.namespaces['urn1'] = 'urn:riv:clinicalprocess:healthcond:actoutcome:3'

def careUnitIds = holder.getNodeValues('/soapenv:Envelope/soapenv:Body/urn:GetLaboratoryOrderOutcomeResponse/urn:laboratoryOrderOutcome/urn1:laboratoryOrderOutcomeHeader/urn1:accountableHealthcareProfessional/urn1:healthcareProfessionalCareUnitHSAId') as List

def expectedCareUnitIds = context.expectedCareUnitIds? context.expectedCareUnitIds.tokenize(',') : []
def unexpectedCareUnitIds = context.unexpectedCareUnitIds ? context.unexpectedCareUnitIds.tokenize(',') : []

log.debug("Assert careUnitIds, unexpectedCareUnitIds:$unexpectedCareUnitIds,expectedCareUnitIds, $expectedCareUnitIds,\nfound careUnitIds $careUnitIds")

if(expectedCareUnitIds.isEmpty()) {
    log.error("Your test data is invalid, expectedCareUnitIds may not be empty")
    assert 0 > 1
}

def missingExpectedIds = []
def extraUnexpectedIds= []

careUnitIds.each {id ->
    if (unexpectedCareUnitIds.contains(id)) {
        extraUnexpectedIds.add(id)
    }
}

expectedCareUnitIds.each {id ->
    if (!careUnitIds.contains(id)) {
        missingExpectedIds.add(id)
    }
}

if(!missingExpectedIds.isEmpty() || !extraUnexpectedIds.isEmpty()) {
    log.error("Response contains unexpected CareUnitIds: $extraUnexpectedIds and/or does not contain  expected CareUnitIds: $missingExpectedIds")
    assert(false)
}</scriptText></con:configuration></con:assertion><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig action="urn:riv:ehr:patientsummary:GetCareContactsResponder:2:GetCareContacts" mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:properties/><con:reportParameters/><con:breakPoints><con:testStepId>74fd6c8e-e3f8-4fb1-b45f-90a4ad24c35b</con:testStepId><con:status>NONE</con:status><con:properties/></con:breakPoints></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:testSuite name="FaultTests" id="abd2894e-3b26-445a-822c-85b850007cec"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CareContactIdWithoutSourceSystemHSAId" searchProperties="true" id="d230a455-9271-4d49-b63f-0c2f99f57cb0"><con:settings/><con:testStep type="groovy" name="Read data" id="4e13b2c9-adc0-44ce-a0db-d646bc237620"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("CareContactIdWithoutSourceSystemHSAId")

//context.each {key, value ->log.debug("$key = $value")} </script></con:config></con:testStep><con:testStep type="request" name="CallWithEmptySourceSystemHSAId" id="073904e2-1443-4839-853c-b2a18d36b59f"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetLaboratoryOrderOutcomeResponderBinding</con:interface><con:operation>GetLaboratoryOrderOutcome</con:operation><con:request name="CallWithEmptySourceSystemHSAId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="ERROR"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetLaboratoryOrderOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
          </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetLaboratoryOrderOutcome>
      </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response" id="79e2292b-0c44-4c2d-8ad4-66dca7d9c2ad"/><con:assertion type="Schema Compliance" id="4accdbe7-01c4-4ea4-928f-2eba9ecdab39"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault" id="aa906b07-6b53-4e16-b65d-396468ddce53"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure result.resultCode equals ERROR" id="b1f2922f-d3c7-4805-95fe-40ed5bce4a6b"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>69fcf125-cfbe-4af1-914a-d915c4b9331b</con:id><con:isGroup>false</con:isGroup><con:sourceId>073904e2-1443-4839-853c-b2a18d36b59f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3';
declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetLaboratoryOrderOutcomeResponse[1]/urn:result[1]/urn1:resultCode[1]</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure result.errorCode equals INVALID_REQUEST" id="4fe2c344-d162-43b9-ad80-378f9bde6540"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>be8cc06f-11be-476f-954e-85c48174ff75</con:id><con:isGroup>false</con:isGroup><con:sourceId>073904e2-1443-4839-853c-b2a18d36b59f</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetLaboratoryOrderOutcomeResponse[1]/urn:result[1]/urn1:errorCode[1]</path><content>INVALID_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="request" name="CallWithoutSourceSystemHSAId" id="b434e8c3-90a2-4f78-81e0-04e105a054db"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetLaboratoryOrderOutcomeResponderBinding</con:interface><con:operation>GetLaboratoryOrderOutcome</con:operation><con:request name="CallWithoutSourceSystemHSAId"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="ERROR"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetLaboratoryOrderOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
          </urn1:patientId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetLaboratoryOrderOutcome>
      </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="assertionteststep" name="copy AND ensure result.errorCode equals INVALID_REQUEST" id="105f61bf-8339-4812-8f37-fdbc2e562d6f"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>be8cc06f-11be-476f-954e-85c48174ff75</con:id><con:isGroup>false</con:isGroup><con:sourceId>b434e8c3-90a2-4f78-81e0-04e105a054db</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetLaboratoryOrderOutcomeResponse[1]/urn:result[1]/urn1:errorCode[1]</path><content>INVALID_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="Copy of AND ensure result.resultCode equals ERROR"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>69fcf125-cfbe-4af1-914a-d915c4b9331b</con:id><con:isGroup>false</con:isGroup><con:sourceId>b434e8c3-90a2-4f78-81e0-04e105a054db</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3';
declare namespace soapenv='http://schemas.xmlsoap.org/soap/envelope/';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetLaboratoryOrderOutcomeResponse[1]/urn:result[1]/urn1:resultCode[1]</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:testCase failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="SourceSystemHSAIdAndLogicalAddress" searchProperties="true" id="fb7c7bca-47ff-4c44-82d7-88d2f6f84863"><con:settings/><con:testStep type="groovy" name="Read data" id="1ba3f564-1571-4df5-a2ad-e858399f4dd4"><con:settings/><con:config><script>import se.skl.rivta.testsupport.soapui.datasource.XmlDataReader
import com.eviware.soapui.support.GroovyUtils

def utils = new GroovyUtils(context)
def dataFile = new File(utils.projectPath + "/data.xml")
def source = new XmlDataReader(context, dataFile)

source.load("SourceSystemHSAIdAndLogicalAddress")

//context.each {key, value ->log.debug("$key = $value")} </script></con:config></con:testStep><con:testStep type="request" name="Call GetLaboratoryOrderOutcome" id="5f7a7fd6-bf47-4b5b-8284-a1fbec237267"><con:settings/><con:config xsi:type="con:RequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:interface>GetLaboratoryOrderOutcomeResponderBinding</con:interface><con:operation>GetLaboratoryOrderOutcome</con:operation><con:request name="Call GetLaboratoryOrderOutcome"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="x-mock-response" value="ERROR"/>
  &lt;con:entry key="x-rivta-original-serviceconsumer-hsaid" value="${httpHeaderHsaId}"/>
&lt;/xml-fragment></con:setting></con:settings><con:encoding>UTF-8</con:encoding><con:endpoint>${webServiceUrl}</con:endpoint><con:request><![CDATA[<soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" xmlns:urn="urn:riv:itintegration:registry:1" xmlns:urn1="urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3" xmlns:urn2="urn:riv:clinicalprocess:healthcond:actoutcome:3">
   <soapenv:Header>
      <urn:LogicalAddress>${logicalAddress}</urn:LogicalAddress>
   </soapenv:Header>
   <soapenv:Body>
      <urn1:GetLaboratoryOrderOutcome>
         <urn1:patientId>
            <urn2:id>${patientId}</urn2:id>
            <urn2:type>${patientIdType}</urn2:type>
          </urn1:patientId>
         <urn1:sourceSystemHSAId>${sourceSystemHSAId}</urn1:sourceSystemHSAId>
         <urn1:careContactId>${careContactId}</urn1:careContactId>
      </urn1:GetLaboratoryOrderOutcome>
      </soapenv:Body>
</soapenv:Envelope>]]></con:request><con:assertion type="SOAP Response"/><con:assertion type="Schema Compliance"><con:configuration/></con:assertion><con:assertion type="SOAP Fault Assertion" name="Not SOAP Fault"/><con:credentials><con:selectedAuthProfile>Basic</con:selectedAuthProfile><con:addedBasicAuthenticationTypes>Basic</con:addedBasicAuthenticationTypes><con:authType>Global HTTP Settings</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:wsaConfig mustUnderstand="NONE" version="200508"/><con:wsrmConfig version="1.2"/></con:request></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure result.resultCode equals ERROR" id="2a42e7f9-c8b6-476e-8ad0-afb3f72508d4"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>b57d0e68-e7b2-45fd-ba2a-1c671cff4783</con:id><con:isGroup>false</con:isGroup><con:sourceId>5f7a7fd6-bf47-4b5b-8284-a1fbec237267</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetLaboratoryOrderOutcomeResponse[1]/urn:result[1]/urn1:resultCode[1]</path><content>ERROR</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:testStep type="assertionteststep" name="AND ensure result.errorCode equals INVALID_REQUEST"><con:settings/><con:config xsi:type="con:AssertionTestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:entry><con:id>b57d0e68-e7b2-45fd-ba2a-1c671cff4783</con:id><con:isGroup>false</con:isGroup><con:sourceId>5f7a7fd6-bf47-4b5b-8284-a1fbec237267</con:sourceId><con:propertyName>Response</con:propertyName><con:assertion type="XPath Match" name="XPath Match"><con:configuration><path>declare namespace urn='urn:riv:clinicalprocess:healthcond:actoutcome:GetLaboratoryOrderOutcomeResponder:3';
declare namespace urn1='urn:riv:clinicalprocess:healthcond:actoutcome:3';
//urn:GetLaboratoryOrderOutcomeResponse[1]/urn:result[1]/urn1:errorCode[1]</path><content>INVALID_REQUEST</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion></con:entry></con:config></con:testStep><con:properties/><con:reportParameters/></con:testCase><con:properties/><con:reportParameters/></con:testSuite><con:requirements/><con:properties/><con:wssContainer/><con:databaseConnectionContainer/><con:oAuth2ProfileContainer/><con:reporting><con:reportTemplates/><con:xmlTemplates/><con:parameters/></con:reporting><con:sensitiveInformation/></con:soapui-project>